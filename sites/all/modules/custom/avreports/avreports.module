<?php

/**
 * @file
 * AV Products module.
 */

// Constants.
define('AVREPORTS_MODULE_PATH', drupal_get_path('module', 'avreports'));

// Includes.
module_load_include('inc', 'avreports', 'inc/helpers');

// Permissions
define('AVREPORTS_PERM_SOA', 'avbase reports soa');
define('AVREPORTS_PERM_GENERAL', 'avbase reports general');

/**
 * Implementation of hook_permission().
 */
function avreports_permission() {
  $permissions = array(
    AVREPORTS_PERM_SOA => array(
      'title' => 'Statement of Account',
    ),
    AVREPORTS_PERM_GENERAL => array(
      'title' => 'Basic reports',
    ),
  );
  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function avreports_menu() {
  $items['av/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_home_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    //'expanded' => TRUE,
  );

  $transaction_types = avtxns_txn_types();
  foreach ($transaction_types as $k => $v) {
    $items['av/reports/transaction-list/' . $k] = array(
      'title' => $v['name'] . ' List',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avreports_txn_list_form', $k),
      'access arguments' => array(AVREPORTS_PERM_GENERAL),
      'type' => MENU_CALLBACK,
      //'menu_name' => 'av',
      //'expanded' => TRUE,
    );
  }

  $items['av/reports/soa'] = array(
    'title' => 'Statement of Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_soa_form'),
    'access arguments' => array(AVREPORTS_PERM_SOA),
    'type' => MENU_CALLBACK,
  );

  $items['av/reports/inventory-ranking/%'] = array(
    'title' => 'Inventory Ranking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_inventory_ranking_form', 3),
    'access arguments' => array(AVREPORTS_PERM_GENERAL),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avreports_theme($existing, $type, $theme, $path) {
  $themes = array();

  $template_path = $path . '/templates';

  // FORMS.
  $theme_names = array(
    'avreports_txn_list',
    'avreports_soa',
    'avreports_balance_ages',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  // OTHERS.
  $theme_names = array(
    //'avtrans_po_mail',
    //'avtrans_po_mail_table',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  return $themes;
}

/**
 * Reports Home page.
 * @param $form
 * @param $form_state
 * @return array
 */
function avreports_home_form($form, &$form_state) {
// Set autocomplete off.
  $form['#attributes']['autocomplete'] = 'off';
  //$form['intro']['#markup'] = t('Reports');
  //$form['delivery_list'] = array('#markup' => l('Delivery List', 'av/reports/delivery-list', array('attributes' => array('class' => array('uk-button', 'uk-button-primary')))));
  $form['soa'] = array('#markup' => l('Statement of Account', 'av/reports/soa', array('attributes' => array('class' => array('uk-button', 'uk-button-primary uk-margin-small-right')))));
  $form['hr1'] = array('#markup' => '<hr />');
  $transaction_types = avtxns_txn_types();
  foreach ($transaction_types as $k => $type) {
    $form[$k . '_list'] = array('#markup' => l($type['name'] . ' List', 'av/reports/transaction-list/' . $k, array('attributes' => array('class' => array('uk-button uk-button-primary uk-margin-small-right')))));
  }
  $form['hr2'] = array('#markup' => '<hr />');
  $form['inventory_ranking_purchase'] = array('#markup' => l('Inventory Ranking - Purchase', 'av/reports/inventory-ranking/purchase', array('attributes' => array('class' => array('uk-button', 'uk-button-primary uk-margin-small-right')))));
  $form['inventory_ranking_sales'] = array('#markup' => l('Inventory Ranking - Sales', 'av/reports/inventory-ranking/sales', array('attributes' => array('class' => array('uk-button', 'uk-button-primary uk-margin-small-right')))));
  return $form;
}

/**
 * Transaction List report.
 * @param $form
 * @param $form_state
 * @param $transaction_type
 *
 * @return array
 * @throws Exception
 */
function avreports_txn_list_form($form, &$form_state, $transaction_type) {
  global $user;
  $user_filter = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];
  $agent_name = empty($user_filter['avcat_agent.title']) ? '' : $user_filter['avcat_agent.title'];

  // Transaction type details.
  $ttd = avtxns_txn_types($transaction_type);

  // Headers.
  $header = array(
    'id' => array('data' => strtoupper($transaction_type) . '#', 'class' => array('uk-text-center uk-width-1-10')),
    'customer' => array('data' => 'Customer', 'class' => array('uk-width-4-10')),
    'total' => array('data' => 'Total', 'class' => array('uk-text-right uk-width-1-10')),
    'terms' => array('data' => 'Terms', 'class' => array('uk-text-center uk-width-2-10')),
    'agent' => array('data' => 'Agent', 'class' => array('uk-width-2-10')),
  );
  if (!empty($agent_name)) {
    unset($header['agent']);
  }


  $where[] = "avtxn.transaction_type = '" . $transaction_type . "'";
  $where[] = "avtxn.status IN (" . AVTXNS_TXN_STATUS_CLOSED . ", " . AVTXNS_TXN_STATUS_OPEN . ")";

  // Add today filter.
  $today = format_date(time(), 'custom', 'F d, Y');
  if (empty($user_filter['avtxn.transaction_date'])) {
    $timestamp = strtotime($today);
    $next_day_timestamp = strtotime('+1 day', $timestamp);
    $where[] = "avtxn.transaction_date >= $timestamp AND avtxn.transaction_date < $next_day_timestamp";
  }

  $filter_form_settings = array(
    'avtxn.id' => array('#access' => FALSE),
    'search_text' => array('#access' => FALSE),
    'avtxn.transaction_date' => array('#default_value' => $today),
    'avcat_agent.title' => array('#access' => TRUE, '#autocomplete_path' => 'av/categories/agent' . $ttd['ctd']['type'] . '/autocomplete'),
    //'reset_button' => array('#access' => FALSE),
    //'search_button' => array('#table_parents' => array('transaction_list_table')),
  );
  $form['transaction_list_filter'] = avtxns_txn_list_filter_form($form, $form_state, $filter_form_settings);


  $select = array();
  $select[] = 'avtxn_detail.ref_txn_type';
  $select[] = "IF (
      avtxn.transaction_type = '" . AVTXNS_TXN_TYPE_PAYMENT . "',
      SUM(avtxn_detail.paid_amount),
      (SUM(
          avtxn_detail.qty
          * avtxn_detail.cost
          * (IF(avtxn_detail.discount1, (1 - avtxn_detail.discount1 / 100), 1))
          * (IF(avtxn_detail.discount2, (1 - avtxn_detail.discount2 / 100), 1))
          * (IF(avtxn_detail.discount3, (1 - avtxn_detail.discount3 / 100), 1))
          * (IF(avtxn_detail.discount4, (1 - avtxn_detail.discount4 / 100), 1))
        )
      )
    ) AS grand_total";
  $joins = array();
  $joins[] = 'LEFT JOIN {avtbl_transaction_details} AS avtxn_detail ON avtxn_detail.transaction_id = avtxn.id';
  $group_by = array('avtxn.id', 'avtxn_detail.ref_txn_type');
  $transactions = avtxns_txns_query_load($where, $args, NULL, NULL, NULL, $select, $joins, $group_by);
  $total_receivables = 0;
  $row_totals = array();
  foreach ($transactions as $row) {
    $transaction_type = avtxns_txn_types($row->transaction_type);
    $view_path = "{$transaction_type['base_path']}/$row->id/view";

    if ($transaction_type['type'] == AVTXNS_TXN_TYPE_INVOICE) {
      $row_total = empty($row_totals[$row->id]) ? 0 : $row_totals[$row->id];
      switch ($row->ref_txn_type) {
        case AVTXNS_TXN_TYPE_DELIVERY:
        case AVTXNS_TXN_TYPE_PAYMENT:
          $row_total += $row->grand_total;
          break;
        case AVTXNS_TXN_TYPE_SALES_RETURN:
          $row_total -= $row->grand_total;
          break;
      }
    }
    else {
      $row_total = $row->grand_total;
    }
    $row_totals[$row->id] = $row_total;
    $data = array(
      'id' => array('data' => l($row->id, $view_path), 'class' => array('uk-text-center')),
      'customer' => check_plain($row->display_name),
      'total' => array('data' => l(number_format($row_total, 2), $view_path), 'class' => array('uk-text-right')),
      'terms' => array('data' => check_plain($row->term_name), 'class' => array('uk-text-center')),
      'agent' => array('data' => check_plain($row->agent_name), 'class' => array('')),
    );
    if (!empty($agent_name)) {
      unset($data['agent']);
    }
    $rows[$row->id] = array('data' => $data, 'class' => array('uk-table-middle'));
  }

  foreach ($row_totals as $rt) {
    $total_receivables += $rt;
  }

  if (empty($rows)) {
    $table_markup = '<div class="uk-margin-top uk-text-muted">No match found.</div>';
  }
  else {
    $table_attributes = array(
      'id' => 'transaction-list-table',
      'class' => array('uk-table-condensed uk-table-striped'),
    );
    // Add summary rows at the bottom of the table.
    $rows[] = array('data' => array(array('data' => '&nbsp;', 'colspan' => 10)));
    $rows[] = array(
      'data' => array(
        array('data' => number_format($total_receivables, 2), 'class' => array('uk-text-right'), 'colspan' => 3),
        array('data' => '', 'colspan' => 2),
      ),
      'class' => array('uk-table-middle'),
    );
    $rows[] = array('data' => array(array('data' => '- End of list -', 'colspan' => 10, 'class' => array('uk-text-muted uk-text-center'))));
    $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes));
  }
  //$form['table']['#markup'] = $table_markup;

  $form['transaction_list_table'] = array(
    '#type' => 'container',
    '#theme' => 'avreports_txn_list',
    '#attributes' => array(
      'id' => 'transaction-list-table-wrapper',
      'class' => array('printable')
    ),
  );
  $transaction_list_table['table']['#markup'] = '<!--Do not remove me-->' . $table_markup;
  if (!empty($rows)) {
    $transaction_list_table['transaction_date'] = array(
      '#title' => 'Transaction Date',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => $today,
    );
    $transaction_list_table['agent'] = array(
      '#title' => 'Agent',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => check_plain($agent_name),
      '#access' => !empty($agent_name),
    );
    avbase_user_extra_details($user);
    $transaction_list_table['prepared_by'] = array(
      '#title' => 'Prepared by',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => check_plain($user->avdata->full_name),
    );
    $transaction_list_table['delivered_by'] = array(
      '#title' => 'Delivered by',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => '_______________________________',
      //'#access' => $transaction_type == AVTXNS_TXN_TYPE_DELIVERY,
    );
  }

  $form['transaction_list_table'] += $transaction_list_table;
  //$delivery_report

  //$form['delivery_list_printable'] += $delivery_report;


  $form['buttons']['#theme'] = 'avbase_crud_button_group';
  $form['buttons']['print'] = array(
    '#id' => 'av-print-btn',
    '#type' => 'button',
    '#value' => t('Print...'),
    '#visible_in_view_mode' => TRUE,
    '#attributes' => array('class' => array('uk-button-primary')),
  );

  return $form;
}

/**
 * SOA report.
 * @param $form
 * @param $form_state
 *
 * @return array
 * @throws Exception
 */
function avreports_soa_form($form, &$form_state) {
  global $user;
  $user_filter = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];

  // Headers.
  $header = array(
    'date' => array('data' => 'Date', 'class' => array(''), 'style' => 'width: 13%;'),
    'reference' => array('data' => 'Reference', 'class' => array(''), 'style' => 'width: 12%;'),
    'description' => array('data' => 'Description', 'class' => array(''), 'style' => 'width: 15%;'),
    'debit' => array('data' => 'Debit', 'class' => array('uk-text-right'), 'style' => 'width: 20%;'),
    'credit' => array('data' => 'Credit', 'class' => array('uk-text-right'), 'style' => 'width: 20%;'),
    'balance' => array('data' => 'Balance', 'class' => array('uk-text-right'), 'style' => 'width: 20%;'),
  );

  $where[] = 'avtxn.transaction_type IN (:transaction_types)';
  $args[':transaction_types'] = array(AVTXNS_TXN_TYPE_INVOICE, AVTXNS_TXN_TYPE_PAYMENT);
  $where[] = "avtxn.status IN (" . AVTXNS_TXN_STATUS_CLOSED . ", " . AVTXNS_TXN_STATUS_OPEN . ")";

  // Add today filter.
  $today = format_date(time(), 'custom', 'F d, Y');
  $filter_form_settings = array(
    'avtxn.id' => array('#access' => FALSE),
    'search_text' => array('#access' => FALSE),
    'avtxn.transaction_date' => array('#access' => FALSE),
    'date_to' => array('#default_value' => $today, '#access' => TRUE),
    'avclients.display_name' => array(
      '#autocomplete_path' => 'av/clients/autocomplete/' . AVCLIENT_STATUS_ACTIVE . '/' . AVCLIENT_TYPE_CUSTOMER,
      '#attributes' => array(
        'placeholder' => 'search customer',
        'class' => array('trigger-ajax-search'),
      ),
      '#access' => TRUE,
    ),
    //'reset_button' => array('#access' => FALSE),
    //'search_button' => array('#table_parents' => array('transaction_list_table')),
  );
  $form['transaction_list_filter'] = avtxns_txn_list_filter_form($form, $form_state, $filter_form_settings);

  $client_name = empty($user_filter['avclients.display_name']) ? '' : $user_filter['avclients.display_name'];
  $client = NULL;
  if (!empty($client_name)) {
    $client = avclient_query_load(array('avclients.display_name = :name'), array(':name' => $client_name));
    $client = array_shift($client);
  }

  $select[] = 'avtxn_detail.ref_txn_type';
  $select[] = "IF (
      avtxn.transaction_type = '" . AVTXNS_TXN_TYPE_PAYMENT . "',
      SUM(avtxn_detail.paid_amount),
      (SUM(
          avtxn_detail.qty
          * avtxn_detail.cost
          * (IF(avtxn_detail.discount1, (1 - avtxn_detail.discount1 / 100), 1))
          * (IF(avtxn_detail.discount2, (1 - avtxn_detail.discount2 / 100), 1))
          * (IF(avtxn_detail.discount3, (1 - avtxn_detail.discount3 / 100), 1))
          * (IF(avtxn_detail.discount4, (1 - avtxn_detail.discount4 / 100), 1))
        )
      )
    ) AS grand_total";
  $joins = array();
  $joins[] = 'LEFT JOIN {avtbl_transaction_details} AS avtxn_detail ON avtxn_detail.transaction_id = avtxn.id';
  $group_by = array('avtxn.id', 'avtxn_detail.ref_txn_type');
  $order_by = array('avtxn.transaction_date ASC', 'avtxn.id ASC', 'avtxn_detail.ref_txn_type ASC');
  $transactions = empty($client->id) ? array() : avtxns_txns_query_load($where, $args, NULL, NULL, $order_by, $select, $joins, $group_by);
  $rows = array();
  $total_receivables = 0;
  $balance = 0;

  $opening_balance = isset($client->opening_balance) ? (float) $client->opening_balance : 0;
  if (!empty($opening_balance)) {
    $opening_balance_details = array(
      'transaction_date' => $client->created,
      'grand_total' => $opening_balance,
      'description' => t('Opening balance'),
    );
    array_unshift($transactions, (object) $opening_balance_details);
  }

  foreach ($transactions as $row) {
    $date_string = format_date($row->transaction_date, 'custom', 'M. d, Y');
    if (!empty($row->id)) {
      // Get transaction type details.
      $ttd = avtxns_txn_types($row->transaction_type);
      $view_path = "{$ttd['base_path']}/$row->id/view";
      $reference = l(strtoupper($row->transaction_type) . '# ' . $row->id, $view_path);
      switch ($row->ref_txn_type) {
        case AVTXNS_TXN_TYPE_DELIVERY:
          $description = t('Sales');
          break;
        case AVTXNS_TXN_TYPE_SALES_RETURN:
          $description = t('Returns');
          break;
        default:
          $description = $ttd['name'];
          break;
      }
      $description = l($description, $view_path);
      $date_string = l($date_string, $view_path);
    }
    else {
      $reference = empty($row->reference) ? '' : $row->reference;
      $description = empty($row->description) ? '' : $row->description;
    }
    $data = array(
      'date' => array('data' => $date_string, 'class' => array('')),
      'reference' => $reference,
      'description' => array('data' => $description, 'class' => array('')),
      'debit' => array('data' => '', 'class' => array('uk-text-right')),
      'credit' => array('data' => '', 'class' => array('uk-text-right')),
      'balance' => array('data' => '', 'class' => array('uk-text-right')),
    );

    $skip_credit = FALSE;
    if (!empty($row->ref_txn_type)) {
      // Get reference transaction type details.
      $rttd = avtxns_txn_types($row->ref_txn_type);
      $credit = $rttd['receivable_type'] == 'credit' ? $row->grand_total : 0;
      $debit = $rttd['receivable_type'] == 'debit' ? $row->grand_total : 0;
    }
    else {
      $credit = 0;
      $debit = $row->grand_total;
    }

    $data['credit']['data'] = empty($credit) ? '' : number_format($credit, 2);
    $data['debit']['data'] = empty($debit) ? '' : number_format($debit, 2);
    $balance = $balance - $credit + $debit;
    $data['balance']['data'] = number_format($balance, 2);

    $rows[] = array('data' => $data, 'class' => array('uk-table-middle'));
    $total_receivables += 0;
  }
  if (empty($rows)) {
    $table_markup = '<div class="uk-margin-top uk-text-muted">No match found.</div>';
  }
  else {
    $table_attributes = array(
      'id' => 'transaction-list-table',
      'class' => array('uk-table-condensed uk-table-striped'),
    );
    // Add summary rows at the bottom of the table.
    $rows[] = array('data' => array(array('data' => '&nbsp;', 'colspan' => 10)));
    $rows[] = array(
      'data' => array(
        array('data' => number_format($balance, 2), 'class' => array('uk-text-right uk-text-large'), 'colspan' => 13),
      ),
      'class' => array('uk-table-middle'),
    );
    //$rows[] = array('data' => array(array('data' => '- End of list -', 'colspan' => 10, 'class' => array('uk-text-muted uk-text-center'))));
    $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes));
  }
  $form['transaction_list_table'] = array(
    '#type' => 'container',
    '#theme' => 'avreports_soa',
    '#attributes' => array(
      'id' => 'transaction-list-table-wrapper',
      'class' => array('printable')
    ),
  );
  $transaction_list_table['table']['#markup'] = '<!--Do not remove me-->' . $table_markup;
  if (!empty($rows)) {
    $transaction_list_table['date_to'] = array(
      '#title' => 'As of date',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($user_filter['date_to']) ? '' : $user_filter['date_to'],
    );
    avbase_user_extra_details($user);
    $transaction_list_table['prepared_by'] = array(
      '#title' => 'Prepared by',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => check_plain($user->avdata->full_name),
    );
    $transaction_list_table['received_by'] = array(
      '#type' => 'item',
      '#title' => 'Received by',
      '#title_display' => 'inline-before',
      '#markup' => '_______________________________',
      //'#maxlength' => 65000,
    );
    $transaction_list_table['client_name'] = array(
      '#title' => 'Customer',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => check_plain($client->display_name),
    );
    $transaction_list_table['term_name'] = array(
      '#title' => 'Terms',
      '#type' => 'item',
      '#markup' => check_plain($client->term_name),
    );
    $address = array(
      check_plain($client->address),
      check_plain($client->city) . ' ' . check_plain($client->province),
      check_plain($client->zip_code),
    );
    $transaction_list_table['address'] = array(
      '#title' => 'Address',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => implode('<br />', $address),
    );
    $transaction_list_table['phone'] = array(
      '#title' => 'Contact #',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => empty($client->data['phone1']) ? '' : ('Contact #: ' . $client->data['phone1']),
    );
  }

  // Show balance aging.


  if (!empty($client->id)) {
    $transaction_list_table['balance_ages'] = avreports_client_balance_aging_form($client->id);
  }

  $form['transaction_list_table'] += $transaction_list_table;

  $form['buttons']['#theme'] = 'avbase_crud_button_group';
  $form['buttons']['print'] = array(
    '#id' => 'av-print-btn',
    '#type' => 'button',
    '#value' => t('Print...'),
    '#visible_in_view_mode' => TRUE,
    '#attributes' => array('class' => array('')),
    '#icon_key' => 'print',
  );

  return $form;
}

function avreports_inventory_ranking_form($form, &$form_state, $transaction_kind) {
  $where = array(); $args = array();
  $user_filter = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];

  // Add today filter.
  $today = format_date(time(), 'custom', 'F d, Y');
  $client_statuses = array(AVCLIENT_STATUS_ACTIVE, AVCLIENT_STATUS_SUSPENDED);
  $client_types = array(AVCLIENT_TYPE_CUSTOMER, AVCLIENT_TYPE_VENDOR);
  $agent_categories = array('agent' . AVCLIENT_TYPE_CUSTOMER, 'agent' . AVCLIENT_TYPE_VENDOR);
  $filter_form_settings = array(
    'date_from' => array(
      '#title' => t('Date from'),
      //'#default_value' => $today,
      '#access' => TRUE,
    ),
    'date_to' => array(
      '#title' => t('Date to'),
      //'#default_value' => $today,
      '#access' => TRUE,
    ),
    'avclients.display_name' => array(
      '#title' => t('Vendor / Customer'),
      '#autocomplete_path' => 'av/clients/autocomplete/' . implode('-', $client_statuses) . '/' . implode('-', $client_types),
      '#access' => TRUE,
    ),
    'avcat_agent.title' => array(
      '#title' => t('Agent'),
      '#access' => TRUE,
      '#autocomplete_path' => 'av/categories/agent' . implode('-', $agent_categories) . '/autocomplete'),
  );
  $form['transaction_list_filter'] = avtxns_txn_list_filter_form($form, $form_state, $filter_form_settings);
  $form['#transaction_query_exceptions'] = array(
    'date_to' => array(
      '#query_field_aliases' => array('avtxn_purchase.transaction_date', 'avtxn_sales.transaction_date')
    ),
    'date_from' => array(
      '#query_field_aliases' => array('avtxn_purchase.transaction_date', 'avtxn_sales.transaction_date')
    ),
    //'avclients.display_name' => array(
    //  '#query_field_aliases' => array('avclients_vendor.display_name', 'avclients_customer.display_name')
    //),
  );
  // Set table pagination and sort settings.
  if (!empty($user_filter['settings']['table_href'])) {
    $table_ajax_href = $user_filter['settings']['table_href'];
    $href_parts = parse_url($table_ajax_href);
    if (!empty($href_parts['query'])) {
      parse_str($href_parts['query'], $href_query);
      foreach ($href_query as $k => $v) {
        $_GET[$k] = $v;
      }
    }
  }

  $header = array(
    'placeholder' => array('data' => '', 'class' => array('suk-hidden')),
    'item_name' => array('data' => 'Product', 'field' => 'avproducts.title'),
    'qty_purchased' => array('data' => 'Purchased', 'field' => 'qty_purchased', 'class' => array('uk-text-right')),
    'total_cost' => array('data' => 'Total Cost', 'field' => 'total_cost', 'class' => array('uk-text-right')),
    'qty_sold' => array('data' => 'Sold', 'field' => 'qty_sold', 'class' => array('uk-text-right')),
    //'sales_cost' => array('data' => 'Cost of goods sold', 'field' => 'total_sales', 'class' => array('uk-text-right')),
    'total_sales' => array('data' => 'Total Sales', 'field' => 'total_sales', 'class' => array('uk-text-right')),
    //'profit' => array('data' => 'Gross Profit', 'class' => array('uk-text-right')),
  );

  $client_name = empty($user_filter['avclients.display_name']) ? '' : $user_filter['avclients.display_name'];
  $list_type = '';
  if (!empty($client_name)) {
    $client_type = db_query("SELECT client_type FROM {avtbl_clients} WHERE display_name = :dn", array(':dn' => $client_name))->fetchfield();
    if ($client_type == AVCLIENT_TYPE_CUSTOMER) {
      $list_type = 'sales';
    }
    elseif ($client_type == AVCLIENT_TYPE_VENDOR) {
      $list_type = 'purchase';
    }
  }
  if ($list_type == 'sales') {
    unset($header['purchased']);
    unset($header['total_cost']);
  }
  elseif ($list_type == 'purchase') {
    unset($header['sold']);
    unset($header['total_sales']);
  }


  $order_by = avbase_build_header_order_array($header);
  $group_by = array();
  $group_by = array('avproducts.id', 'avtxn.transaction_type');
  $records = avtxns_product_query_load($where, $args, NULL, NULL, $order_by, array(), array(), $group_by);
  $rows = array();
  $index = 0;
  foreach ($records as $row) {
    $rows[] = array(
      'data' => array(
        'placeholder' => array('data' => ++$index, 'class' => array('suk-hidden')),
        'item_name' => check_plain($row->title),
        'qty_purchased' => array('data' => number_format($row->qty_purchased), 'class' => array('uk-text-right')),
        'total_cost' => array('data' => number_format($row->total_cost, 2), 'class' => array('uk-text-right')),
        'qty_sold' => array('data' => number_format($row->qty_sold), 'class' => array('uk-text-right')),
        //'sales_cost' => array('data' => '-', 'class' => array('uk-text-right')),
        'total_sales' => array('data' => number_format($row->total_sales, 2), 'class' => array('uk-text-right')),
        //'profit' => array('data' => number_format($row->total_sold), 'class' => array('uk-text-right')),
      ),
      //'class' => array($row_class),
    );

    //if ($list_type == 'sales') {
    //  unset($rows[$row->id]['data']['purchased']);
    //  unset($rows[$row->id]['data']['total_cost']);
    //}
    //elseif ($list_type == 'purchase') {
    //  unset($rows[$row->id]['data']['sold']);
    //  unset($rows[$row->id]['data']['total_sales']);
    //}
  }

  //$remember_records = array();
  //foreach ($records as $row) {
  //  $remember_records[$row->id]['title'] = $row->title;
  //  //$remembered_record = empty($remember_records[$row->id]) ? array() : $remember_records[$row->id];
  //  if (!empty($row->qty_purchased) && empty($remember_records[$row->id]['qty_purchased'])) {
  //    $remember_records[$row->id]['qty_purchased'] = $row->qty_purchased;
  //  }
  //  if (!empty($row->qty_sold) && empty($remember_records[$row->id]['qty_sold'])) {
  //    $remember_records[$row->id]['qty_sold'] = $row->qty_sold;
  //  }
  //  if (!empty($row->total_cost) && empty($remember_records[$row->id]['total_cost'])) {
  //    $remember_records[$row->id]['total_cost'] = $row->total_cost;
  //  }
  //  if (!empty($row->total_sales) && empty($remember_records[$row->id]['total_sales'])) {
  //    $remember_records[$row->id]['total_sales'] = $row->total_sales;
  //  }
  //
  //  //if ($list_type == 'sales') {
  //  //  unset($rows[$row->id]['data']['purchased']);
  //  //  unset($rows[$row->id]['data']['total_cost']);
  //  //}
  //  //elseif ($list_type == 'purchase') {
  //  //  unset($rows[$row->id]['data']['sold']);
  //  //  unset($rows[$row->id]['data']['total_sales']);
  //  //}
  //}
  //foreach ($remember_records as $row) {
  //  $qty_purchased = empty($row['qty_purchased']) ? NULL : $row['qty_purchased'];
  //  $total_cost = empty($row['total_cost']) ? NULL : $row['total_cost'];
  //  $qty_sold = empty($row['qty_sold']) ? NULL : $row['qty_sold'];
  //  $total_sales = empty($row['total_sales']) ? NULL : $row['total_sales'];
  //  $rows[] = array(
  //    'data' => array(
  //      'placeholder' => array('data' => ++$index, 'class' => array('suk-hidden')),
  //      'item_name' => check_plain($row['title']),
  //      'qty_purchased' => array('data' => number_format($qty_purchased), 'class' => array('uk-text-right')),
  //      'total_cost' => array('data' => number_format($total_cost, 2), 'class' => array('uk-text-right')),
  //      'qty_sold' => array('data' => number_format($qty_sold), 'class' => array('uk-text-right')),
  //      //'sales_cost' => array('data' => '-', 'class' => array('uk-text-right')),
  //      'total_sales' => array('data' => number_format($total_sales, 2), 'class' => array('uk-text-right')),
  //      //'profit' => array('data' => number_format($row->total_sold), 'class' => array('uk-text-right')),
  //    ),
  //    //'class' => array($row_class),
  //  );
  //}

  $table_attributes = array(
    'id' => 'transaction-list-table',
    'class' => array('uk-table-condensed printable'),
  );

  $pager_html = empty($options['#hide_filter_form']) ? theme('pager', array('tags' => array())) : '';
  $form['transaction_list_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => '<div class="uk-text-muted">' . t('No match found.') . '</div>',
    '#attributes' => $table_attributes,
    '#prefix' => '<div id="transaction-list-table-wrapper">',
    '#suffix' => $pager_html . '<!--Do not remove me.--></div>',
  );

  $form['buttons']['#theme'] = 'avbase_crud_button_group';
  $form['buttons']['print'] = array(
    '#id' => 'av-print-btn',
    '#type' => 'button',
    '#value' => t('Print...'),
    '#visible_in_view_mode' => TRUE,
    '#attributes' => array('class' => array('')),
    '#icon_key' => 'print',
  );
  return $form;
}
