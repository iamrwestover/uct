<?php

/**
 * @file
 * AV Products module.
 */

// Constants.
define('AVREPORTS_MODULE_PATH', drupal_get_path('module', 'avreports'));
define('AVREPORTS_EXPORT_FILE_PREFIX', 'uct-report-');
define('AVREPORTS_FS_PL', 'fs1'); // Profit / Loss
define('AVREPORTS_FS_BS', 'fs2'); // Balance Sheet

// Includes.
module_load_include('inc', 'avreports', 'inc/helpers');
module_load_include('inc', 'avreports', 'inc/export');

// Permissions
define('AVREPORTS_PERM_SOA', 'avbase reports soa');
define('AVREPORTS_PERM_GENERAL', 'avbase reports general');
define('AVREPORTS_PERM_ACCOUNTING', 'avbase reports accounting');
define('AVREPORTS_PERM_TXN_LIST', 'avbase reports txn_list');
define('AVREPORTS_PERM_INVENTORY', 'avbase reports inventory');

define('AVREPORTS_LIST_DATE_FORMAT', 'm/d/Y');

/**
 * Implementation of hook_permission().
 */
function avreports_permission() {
  $permissions = array(
    AVREPORTS_PERM_TXN_LIST => array(
      'title' => 'Transaction List',
    ),
    AVREPORTS_PERM_INVENTORY => array(
      'title' => 'Inventory',
    ),
    AVREPORTS_PERM_ACCOUNTING => array(
      'title' => 'Accounting',
    ),
  );
  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function avreports_menu() {
  $items['av/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_home_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    //'expanded' => TRUE,
  );

  $transaction_types = avtxns_txn_types();
  foreach ($transaction_types as $k => $v) {
    $items['av/reports/transaction-list/' . $k] = array(
      'title' => $v['name'] . ' List',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avreports_txn_list_form', $k),
      'access arguments' => array(AVREPORTS_PERM_TXN_LIST),
      'type' => MENU_CALLBACK,
      'file' => 'inc/txn_list.form.inc',
    );
  }

  $items['av/reports/customer-balances'] = array(
    'title' => 'Customer Balances',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_client_balances_form', (string) AVCLIENT_TYPE_CUSTOMER),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_list.form.inc',
  );
  $items['av/reports/vendor-balances'] = array(
    'title' => 'Vendor Balances',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_client_balances_form', (string)AVCLIENT_TYPE_VENDOR),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_list.form.inc',
  );

  $items['av/reports/soa'] = array(
    'title' => 'Statement of Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_soa_form'),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
  );

  $items['av/reports/inventory-ranking/%'] = array(
    'title' => 'Inventory Ranking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_inventory_ranking_form', 3),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
  );

  $items['av/reports/sales-to-trade'] = array(
    'title' => 'Invoice Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form'),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/register/' . AVTXNS_TXN_TYPE_DELIVERY] = array(
    'title' => 'Delivery Receipt Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form', AVTXNS_TXN_TYPE_DELIVERY),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/register/' . AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN] = array(
    'title' => 'Stock Transfer - IN Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form', AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/register/' . AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT] = array(
    'title' => 'Stock Transfer - OUT Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form', AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/register/' . AVTXNS_TXN_TYPE_RECEIVE] = array(
    'title' => 'Received Items Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form', AVTXNS_TXN_TYPE_RECEIVE),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/register/' . AVTXNS_TXN_TYPE_SALES_ORDER] = array(
    'title' => 'Sales Order Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form', AVTXNS_TXN_TYPE_SALES_ORDER),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/register/' . AVTXNS_TXN_TYPE_SALES_RETURN] = array(
    'title' => 'Sales Return Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_sales_to_trade_form', AVTXNS_TXN_TYPE_SALES_RETURN),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/sales_to_trade.form.inc',
  );

  $items['av/reports/account-history'] = array(
    'title' => 'Account History',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_account_history_form'),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/account_history.form.inc',
  );

  $items['av/reports/profit-loss'] = array(
    'title' => 'Profit & Loss',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_fs_form', 2),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/fs.form.inc',
  );

  $items['av/reports/fs1'] = array(
    'title' => 'Profit & Loss',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_fs_form', 2),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/fs2.form.inc',
  );
  $items['av/reports/fs2'] = array(
    'title' => 'Balance Sheet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_fs_form', 2),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/fs2.form.inc',
  );
  $items['av/reports/trial-balance'] = array(
    'title' => 'Trial Balance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_trial_balance_form'),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/trial_balance.form.inc',
  );
  $items['av/reports/fs-update-options'] = array(
    'title' => 'Scan and Lock Transactions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_fs_update_form', 2),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/fs2.form.inc',
  );
  $items['av/reports/balance-sheet'] = array(
    'title' => 'Balance Sheet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_fs_form', 2),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/fs.form.inc',
  );

  $items['av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_JOURNAL] = array(
    'title' => 'Journal Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_txn_detail_form', AVTXNS_TXN_TYPE_JOURNAL),
    'access arguments' => array(AVREPORTS_PERM_ACCOUNTING),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_detail.form.inc',
  );

  $items['av/reports/stock-status'] = array(
    'title' => 'Stock Status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_stock_status_form'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_status.form.inc',
  );

  $items['av/reports/old-stock-status'] = array(
    'title' => 'Stock Status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_stock_status_form'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_status_old.form.inc',
  );

  $items['av/reports/stock-history-summary'] = array(
    'title' => 'Summarized Items History',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_stock_history_summary_form'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_history_summary.form.inc',
  );

  $items['av/reports/stock-history-detailed'] = array(
    'title' => 'Detailed Item History',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_stock_history_form'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_history.form.inc',
  );

  $items['av/reports/stock-history2'] = array(
    'title' => 'OLD Module - Stock History',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_old_stock_history_form'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_history.form.inc',
  );

  $items['av/reports/stock-history3'] = array(
    'title' => 'OLD Module - Stock History',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_stock_history_form3'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_history.form3.inc',
  );

  $items['av/reports/stock-shortage'] = array(
    'title' => 'Stock Shortage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_stock_shortage_form'),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/stock_shortage.form.inc',
  );

  $items['av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_SALES_RETURN] = array(
    'title' => 'Stocks Returned - Sales',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_txn_detail_form', AVTXNS_TXN_TYPE_SALES_RETURN),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_detail.form.inc',
  );
  $items['av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_PURCHASE_RETURN] = array(
    'title' => 'Stocks Returned - Purchase',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_txn_detail_form', AVTXNS_TXN_TYPE_PURCHASE_RETURN),
    'access arguments' => array(AVREPORTS_PERM_INVENTORY),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_detail.form.inc',
  );
  $items['av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_PAYMENT] = array(
    'title' => 'Received Payment Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_txn_detail_form', AVTXNS_TXN_TYPE_PAYMENT),
    'access arguments' => array(AVREPORTS_PERM_TXN_LIST),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_detail.form.inc',
  );
  $items['av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_PAY_BILL] = array(
    'title' => 'Bills Payment Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_txn_detail_form', AVTXNS_TXN_TYPE_PAY_BILL),
    'access arguments' => array(AVREPORTS_PERM_TXN_LIST),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn_detail.form.inc',
  );

  $client_types = avclients_client_types();
  foreach ($client_types as $ct) {
    $list_path = 'av/reports/client-list/' . $ct['type'];
    $items[$list_path] = array(
      'title' => $ct['name'] . ' List',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avreports_client_list_form', 3),
      'access arguments' => array(AVREPORTS_PERM_TXN_LIST),
      'type' => MENU_CALLBACK,
      'file' => 'inc/client_list.form.inc',
    );
  }
  $items['av/reports/product-list'] = array(
    'title' => 'Product List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avreports_product_list_form'),
    'access arguments' => array(AVREPORTS_PERM_TXN_LIST),
    'type' => MENU_CALLBACK,
    'file' => 'inc/product_list.form.inc',
  );

  $items['av/reports/export'] = array(
    'title' => 'Export',
    'page callback' => 'avreports_export',
    //'page arguments' => array('avreports_export'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avreports_theme($existing, $type, $theme, $path) {
  $themes = array();

  $template_path = $path . '/templates';

  // FORMS.
  $theme_names = array(
    'avreports_txn_list',
    'avreports_soa',
    'avreports_balance_ages',
    'avreports_inventory_ranking',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  // OTHERS.
  $theme_names = array(
    //'avtrans_po_mail',
    //'avtrans_po_mail_table',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  return $themes;
}

/**
 * Reports Home page.
 * @param $form
 * @param $form_state
 * @return array
 */
function avreports_home_form($form, &$form_state) {
  $form['#attributes']['autocomplete'] = 'off';
  $transaction_types = avtxns_txn_types();

  // Transactions.
  $buttons = array();
  foreach ($transaction_types as $k => $type) {
    $buttons[$k . '_list'] = array('#markup' => l($type['name'] . ' List', 'av/reports/transaction-list/' . $k, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase uk-button-primary uk-margin-small-right uk-margin-bottom')))));
    $buttons[$k . '_list']['#prefix'] = empty($type['button_prefix']) ? '' : ($type['button_prefix']);
  }
  $buttons[AVTXNS_TXN_TYPE_PAYMENT . '_detail'] = array(
    '#markup' => l('Received Payment Details', 'av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_PAYMENT, array(
      'attributes' => array(
        'class' => array(
          'uk-button uk-button-mini uk-text-uppercase',
          'uk-button-primary uk-margin-small-right uk-margin-small-bottom'
        )
      )
    )),
    '#prefix' => '<br />',
  );
  $buttons[AVTXNS_TXN_TYPE_PAY_BILL . '_detail'] = array(
    '#markup' => l('Bills Payment Details', 'av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_PAY_BILL, array(
      'attributes' => array(
        'class' => array(
          'uk-button uk-button-mini uk-text-uppercase',
          'uk-button-primary uk-margin-small-right uk-margin-small-bottom'
        )
      )
    )),
  );
  $buttons['accounts_history_old'] = array('#markup' => l('Journal Details', 'av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_JOURNAL, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase uk-margin-small-bottom uk-button-primary uk-margin-small-right')))));
  $form['txn_reports'] = array(
    '#type' => 'fieldset',
    '#title' => t('Transaction List'),
  );
  $form['txn_reports'] += $buttons;
  $form['txn_reports']['#access'] = user_access(AVREPORTS_PERM_TXN_LIST);

  // Inventory.
  $buttons = array();
  $buttons['stock_status'] = array('#markup' => l('Stock Status', 'av/reports/stock-status', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['stock_history_summary'] = array('#markup' => l('Summarized Items History', 'av/reports/stock-history-summary', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['stock_history'] = array('#markup' => l('Detailed Item History', 'av/reports/stock-history-detailed', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['stock_shortage'] = array('#markup' => l('Stock Shortage', 'av/reports/stock-shortage', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons[AVTXNS_TXN_TYPE_SALES_RETURN . '_detail'] = array('#markup' => l('Stocks Returned - Sales', 'av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_SALES_RETURN, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons[AVTXNS_TXN_TYPE_PURCHASE_RETURN . '_detail'] = array('#markup' => l('Stocks Returned - Purchase', 'av/reports/transaction-detail/' . AVTXNS_TXN_TYPE_PURCHASE_RETURN, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['so_register'] = array('#markup' => '<br />' . l('Sales Order Register', 'av/reports/register/' . AVTXNS_TXN_TYPE_SALES_ORDER, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['dr_register'] = array('#markup' => l('Delivery Receipt Register', 'av/reports/register/' . AVTXNS_TXN_TYPE_DELIVERY, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['rcv_register'] = array('#markup' => l('Received Items Register', 'av/reports/register/' . AVTXNS_TXN_TYPE_RECEIVE, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['stin_register'] = array('#markup' => l('Stock Transfer- IN Register', 'av/reports/register/' . AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['stou_register'] = array('#markup' => l('Stock Transfer- OUT Register', 'av/reports/register/' . AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['inventory_ranking_sales'] = array('#markup' => '<br />' . l('Inventory Ranking - Sales', 'av/reports/inventory-ranking/sales', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $buttons['inventory_ranking_purchase'] = array('#markup' => l('Inventory Ranking - Purchase', 'av/reports/inventory-ranking/purchase', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-bottom')))));
  $form['inventory_reports'] = array(
    '#type' => 'fieldset',
    '#title' => t('Inventory'),
  );
  $form['inventory_reports'] += $buttons;
  $form['inventory_reports']['#access'] = user_access(AVREPORTS_PERM_INVENTORY);

  // List.
  $buttons = array();
  $client_types = avclients_client_types();
  foreach ($client_types as $ct) {
    $list_path = 'av/reports/client-list/' . $ct['type'];
    $buttons['client_' . $ct['type']] = array('#markup' => l($ct['plural_name'], $list_path, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  }
  $buttons['product_list'] = array('#markup' => l('Products', 'av/reports/product-list', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $form['lists'] = array(
    '#type' => 'fieldset',
    '#title' => t('Lists'),
  );
  $form['lists'] += $buttons;
  $form['lists']['#access'] = user_access(AVREPORTS_PERM_TXN_LIST);

  // Accounting.
  $buttons = array();
  $buttons['customer_balances'] = array('#markup' => l('Customer Balances', 'av/reports/customer-balances', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['vendor_balances'] = array('#markup' => l('Vendor Balances', 'av/reports/vendor-balances', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['soa'] = array('#markup' => l('Statement of Account', 'av/reports/soa', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['accounts_history'] = array('#markup' => l('Account History', 'av/reports/account-history', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['trial_balance'] = array('#markup' => l('Trial Balance', 'av/reports/trial-balance', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['profit_loss'] = array('#markup' => l('Profit & Loss', 'av/reports/fs1', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['balance_sheet'] = array('#markup' => l('Balance Sheet', 'av/reports/fs2', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right')))));
  $buttons['sales_to_trade'] = array('#markup' => '<br />' . l('Invoice Register', 'av/reports/sales-to-trade', array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase uk-margin-top', 'uk-button-primary uk-margin-small-right')))));
  $buttons['sr_register'] = array('#markup' => l('Sales Return Register', 'av/reports/register/' . AVTXNS_TXN_TYPE_SALES_RETURN, array('attributes' => array('class' => array('uk-button uk-button-mini uk-text-uppercase', 'uk-button-primary uk-margin-small-right uk-margin-top')))));
  $form['accounting_reports'] = array(
    '#type' => 'fieldset',
    '#title' => t('Accounting'),
  );
  $form['accounting_reports'] += $buttons;
  $form['accounting_reports']['#access'] = user_access(AVREPORTS_PERM_ACCOUNTING);
  return $form;
}



/**
 * SOA report.
 * @param $form
 * @param $form_state
 *
 * @return array
 * @throws Exception
 */
function avreports_soa_form($form, &$form_state) {
  global $user;
  $user_filter = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];

  // Headers.
  $header = array(
    'date' => array('data' => 'Date', 'class' => array('')),
    'reference' => array('data' => 'Reference', 'class' => array('')),
    'description' => array('data' => 'Description', 'class' => array('')),
    'debit' => array('data' => 'Debit', 'class' => array('uk-text-right')),
    'credit' => array('data' => 'Credit', 'class' => array('uk-text-right')),
    'balance' => array('data' => 'Balance', 'class' => array('uk-text-right')),
  );

  $where[] = 'avtxn.transaction_type IN (:transaction_types)';
  $args[':transaction_types'] = array(AVTXNS_TXN_TYPE_INVOICE, AVTXNS_TXN_TYPE_PAYMENT, AVTXNS_TXN_TYPE_CUSTOMER_CHARGES);
  $where[] = "avtxn.status NOT IN (" . AVTXNS_TXN_STATUS_VOID . ")";

  // Add today filter.
  $today = format_date(time(), 'custom', 'F d, Y');
  $client_statuses = array(AVCLIENT_STATUS_ACTIVE, AVCLIENT_STATUS_SUSPENDED);
  $filter_form_settings = array(
    'avtxn.id' => array('#access' => FALSE),
    'search_text' => array('#access' => FALSE),
    'avtxn.transaction_date' => array('#access' => FALSE),
    'date_to' => array('#default_value' => $today, '#access' => TRUE),
    'avclients.display_name' => array(
      '#autocomplete_path' => 'av/clients/autocomplete/' . AVCLIENT_TYPE_CUSTOMER . '/' . implode('-', $client_statuses),
      '#attributes' => array(
        'placeholder' => 'search customer',
        'class' => array('trigger-ajax-search'),
      ),
    ),
    //'reset_button' => array('#access' => FALSE),
    //'search_button' => array('#table_parents' => array('transaction_list_table')),
  );
  $form['transaction_list_filter'] = avtxns_txn_list_filter_form($form, $form_state, $filter_form_settings);

  $client_name = empty($user_filter['avclients.display_name']) ? '' : $user_filter['avclients.display_name'];
  $client = NULL;
  if (!empty($client_name)) {
    $client = avclient_query_load(array('avclients.display_name = :name'), array(':name' => $client_name));
    $client = array_shift($client);
  }

  //$select[] = 'avtxn.amount_to_credit';
  $select[] = 'avtxn_detail.ref_txn_type';
  $select[] = 'avtxn_detail.ref_txn_id';
  $select[] = avtxns_txn_detail_sum_query_discount_applied() . " AS grand_total";
  //$select[] = "IF (
  //    (avtxn.transaction_type = '" . AVTXNS_TXN_TYPE_PAYMENT . "' OR avtxn.transaction_type = '" . AVTXNS_TXN_TYPE_CUSTOMER_CHARGES . "'),
  //    SUM(avtxn_detail.paid_amount),
  //    (SUM(
  //        avtxn_detail.qty
  //        * avtxn_detail.cost
  //        * (IF(avtxn_detail.discount1, (1 - avtxn_detail.discount1 / 100), 1))
  //        * (IF(avtxn_detail.discount2, (1 - avtxn_detail.discount2 / 100), 1))
  //        * (IF(avtxn_detail.discount3, (1 - avtxn_detail.discount3 / 100), 1))
  //        * (IF(avtxn_detail.discount4, (1 - avtxn_detail.discount4 / 100), 1))
  //      )
  //    )
  //  ) AS grand_total";
  $select[] = 'avclients.display_name';

  $joins = array();
  $joins[] = 'LEFT JOIN {avtbl_transaction_details} AS avtxn_detail ON avtxn_detail.transaction_id = avtxn.id';
  $joins[] = 'LEFT JOIN {avtbl_clients} AS avclients ON avclients.id = avtxn.client_id';
  $group_by = array('avtxn.id', 'avtxn_detail.ref_txn_type');
  $order_by = array('avtxn.transaction_date ASC', 'avtxn_detail.id ASC', 'avtxn.id ASC', 'avtxn_detail.ref_txn_type ASC');
  $transactions = empty($client->id) ? array() : avtxns_txns_query_load($where, $args, NULL, NULL, $order_by, $select, $joins, $group_by);
  $rows = array();
  $total_receivables = 0;
  $balance = 0;

  $opening_balance = isset($client->opening_balance) ? (float) $client->opening_balance : 0;
  if (!empty($opening_balance)) {
    $opening_balance_details = array(
      'transaction_date' => $client->created,
      'grand_total' => $opening_balance,
      'description' => t('Opening balance'),
    );
    array_unshift($transactions, (object) $opening_balance_details);
  }

  foreach ($transactions as $row) {
    //if (isset($row->ref_txn_type) && $row->ref_txn_type == AVTXNS_TXN_TYPE_PAYMENT) {
    //  continue;
    //}
    $date_string = format_date($row->transaction_date, 'custom', 'M. d, Y');
    if (!empty($row->id)) {
      // Get transaction type details.
      $ttd = avtxns_txn_types($row->transaction_type);
      $view_path_suffix = 'view';
      $view_path = "{$ttd['base_path']}/$row->id/";


      // Get reference transaction type details.
      if (!empty($row->ref_txn_type)) {
        $rttd = avtxns_txn_types($row->ref_txn_type);
      }
      $references = array();
      switch ($row->ref_txn_type) {
        case AVTXNS_TXN_TYPE_DELIVERY:
          $description = t('Sales');
          break;
        case AVTXNS_TXN_TYPE_SALES_RETURN:
          $description = t('Returns');
          $view_path_suffix = 'apply-credits';
          $references[] = l(avbase_txn_number_format($row->ref_txn_type, $row->ref_txn_id), "{$rttd['base_path']}/$row->ref_txn_id/view");
          $reference_id = db_query("SELECT reference_id FROM {avtbl_transactions} WHERE id = :ref_txn_id", array(':ref_txn_id' => $row->ref_txn_id))->fetchField();
          if (!empty($reference_id)) {
            $references[] = $reference_id;
          }
          break;
        case AVTXNS_TXN_TYPE_PAYMENT:
          $description = t('Credit from overpayment');
          $view_path_suffix = 'apply-credits';
          break;
        case AVTXNS_TXN_TYPE_CREDIT_MEMO:
          $description = t('Credit memo');
          $view_path_suffix = 'apply-credits';
          $references[] = l(avbase_txn_number_format($row->ref_txn_type, $row->ref_txn_id), "{$rttd['base_path']}/$row->ref_txn_id/view");
          $reference_id = db_query("SELECT reference_id FROM {avtbl_transactions} WHERE id = :ref_txn_id", array(':ref_txn_id' => $row->ref_txn_id))->fetchField();
          if (!empty($reference_id)) {
            $references[] = $reference_id;
          }
          break;
        default:
          $description = $ttd['name'];
          break;
      }
      $view_path .= $view_path_suffix;
      $main_reference = l(avbase_txn_number_format($row->transaction_type, $row->id), $view_path);
      array_unshift($references, $main_reference);
      $description = l($description, $view_path);
      $date_string = l($date_string, $view_path);
    }
    else {
      $references[] = empty($row->reference) ? '' : $row->reference;
      $description = empty($row->description) ? '' : $row->description;
    }
    $data = array(
      'date' => array('data' => $date_string, 'class' => array('')),
      'reference' => implode(', ', $references),
      'description' => array('data' => $description, 'class' => array('')),
      'debit' => array('data' => '', 'class' => array('uk-text-right')),
      'credit' => array('data' => '', 'class' => array('uk-text-right')),
      'balance' => array('data' => '', 'class' => array('uk-text-right')),
    );

    $amount = $row->grand_total;
    //if (empty($ttd['payment'])) {
    //  $amount = $row->grand_total;
    //}
    //else {
    //  $amount = $row->grand_total + (float)$row->amount_to_credit;
    //}

    if (!empty($row->ref_txn_type)) {
      $credit = $rttd['ref_ar_type'] == 'credit' ? $amount : 0;
      $debit = $rttd['ref_ar_type'] == 'debit' ? $amount : 0;
    }
    else {
      $credit = 0;
      $debit = $amount;
    }

    $data['credit']['data'] = empty($credit) ? '' : number_format($credit, 2);
    $data['debit']['data'] = empty($debit) ? '' : number_format($debit, 2);
    $balance = $balance - $credit + $debit;
    $data['balance']['data'] = number_format(round($balance, 2), 2);

    $rows[] = array('data' => $data, 'class' => array('uk-table-middle'));
    $total_receivables += 0;
  }
  if (empty($rows)) {
    $table_markup = '<div class="uk-margin-top uk-text-muted">No match found.</div>';
  }
  else {
    $table_attributes = array(
      'id' => 'transaction-list-table',
      'class' => array('uk-table-condensed uk-table-striped uk-table-hover'),
    );
    // Add summary rows at the bottom of the table.
    $rows[] = array('data' => array(array('data' => '&nbsp;', 'colspan' => 10)));
    $rows[] = array(
      'data' => array(
        array('data' => number_format(round($balance, 2), 2), 'class' => array('uk-text-right uk-text-large'), 'colspan' => 13),
      ),
      'class' => array('uk-table-middle'),
    );
    //$rows[] = array('data' => array(array('data' => '- End of list -', 'colspan' => 10, 'class' => array('uk-text-muted uk-text-center'))));
    $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes));
  }
  $form['transaction_list_table'] = array(
    '#type' => 'container',
    '#theme' => 'avreports_soa',
    '#attributes' => array(
      'id' => 'transaction-list-table-wrapper',
      'class' => array('printable uk-text-small uk-text-uppercase')
    ),
  );
  $transaction_list_table['table']['#markup'] = '<!--Do not remove me-->' . $table_markup;
  if (!empty($rows)) {
    $transaction_list_table['date_to'] = array(
      '#title' => 'As of date',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($user_filter['date_to']) ? '' : $user_filter['date_to'],
    );
    avbase_user_extra_details($user);
    $transaction_list_table['prepared_by'] = array(
      '#title' => 'Prepared by',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => check_plain($user->avdata->full_name),
    );
    $transaction_list_table['received_by'] = array(
      '#type' => 'item',
      '#title' => 'Received by',
      '#title_display' => 'inline-before',
      '#markup' => '_______________________________',
      //'#maxlength' => 65000,
    );
    $transaction_list_table['client_name'] = array(
      '#title' => 'Customer',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => check_plain($client->display_name),
    );
    $transaction_list_table['term_name'] = array(
      '#title' => 'Terms',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => check_plain($client->term_name),
    );
    $address = array(
      check_plain($client->address),
      check_plain($client->city) . ' ' . check_plain($client->province),
      check_plain($client->zip_code),
    );
    $transaction_list_table['address'] = array(
      '#title' => 'Address',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => implode('<br />', $address),
    );
    $transaction_list_table['phone'] = array(
      '#title' => 'Contact #',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($client->contact_number) ? '' : check_plain($client->contact_number),
    );
  }

  // Show balance aging.


  if (!empty($client->id)) {
    $transaction_list_table['balance_ages'] = avreports_client_balance_aging_form($client->id);
  }

  $form['transaction_list_table'] += $transaction_list_table;

  $form['buttons']['#theme'] = 'avbase_crud_button_group';
  $form['buttons']['print'] = array(
    '#id' => 'av-print-btn',
    '#type' => 'button',
    '#value' => t('Print...'),
    '#visible_in_view_mode' => TRUE,
    //'#attributes' => array('class' => array('')),
    '#icon_key' => 'print',
  );

  return $form;
}

function avreports_inventory_ranking_form($form, &$form_state, $transaction_kind) {
  drupal_set_title('Inventory Ranking - ' . ucfirst($transaction_kind));
  $ctd = array();
  if ($transaction_kind == 'purchase') {
    $ctd = avclients_client_types(AVCLIENT_TYPE_VENDOR);
  }
  elseif ($transaction_kind == 'sales') {
    $ctd = avclients_client_types(AVCLIENT_TYPE_CUSTOMER);
  }
  $client_statuses = array(AVCLIENT_STATUS_ACTIVE, AVCLIENT_STATUS_SUSPENDED);
  $dad = avtxns_txn_list_filter_date_auto_options();
  $dad_default = empty($dad['last_month_to_date']) ? array() : $dad['last_month_to_date'];
  $filter_form_settings = array(
    'date_auto' => array(
      '#title' => t('Dates'),
      '#default_value' => 'last_month_to_date',
    ),
    'date_from' => array(
      '#title' => t('Date from'),
      '#default_value' => $dad_default['date_from'],
    ),
    'date_to' => array(
      '#title' => t('Date to'),
      '#default_value' => $dad_default['date_to'],
    ),
    'avclients.display_name' => array(
      '#title' => $ctd['name'],
      '#autocomplete_path' => 'av/clients/autocomplete/' . $ctd['type'] . '/' . implode('-', $client_statuses),
    ),
    'avcat_agent.title' => array(
      '#title' => t('Agent'),
      '#autocomplete_path' => 'av/categories/agent' . $ctd['type'] . '/autocomplete',
    ),
    'avcat_principal.title' => array(
      '#title' => t('Principal'),
      '#autocomplete_path' => 'av/categories/principal/autocomplete',
    ),
    'avcat_area.title' => array('#access' => $transaction_kind == 'sales'),
    'reset_button' => array('#attributes' => array('style' => 'margin-top: 25px;')),
  );
  $form['transaction_list_filter'] = avtxns_txn_list_filter_form($form, $form_state, $filter_form_settings);

  $select = $joins = $where = $args = array();
  $user_filter = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];
  $header = array(
    'placeholder' => array('data' => '', 'class' => array('suk-hidden')),
    'item_name' => array('data' => 'Product', 'field' => 'avproducts.title'),
    'onhand_qty' => array('data' => 'Available Qty.', 'field' => 'avproducts.qty'),
  );
  $select[] = 'avproducts.id';
  $select[] = 'avproducts.title';
  $select[] = 'avproducts.qty';
  $joins[] = 'INNER JOIN {avtbl_transaction_details} AS avtxn_detail ON avtxn_detail.item_id = avproducts.id';
  $joins[] = 'INNER JOIN {avtbl_transactions} AS avtxn ON avtxn.id = avtxn_detail.transaction_id';
  $joins[] = 'LEFT JOIN {avtbl_clients} AS avclients ON avclients.id = avtxn.client_id';
  $joins[] = 'LEFT JOIN {avtbl_categories} AS avcat_agent ON avcat_agent.id = avtxn.agent_id';
  $joins[] = 'LEFT JOIN {avtbl_categories} AS avcat_principal ON avcat_principal.id = avproducts.principal_id';
  $where[] = "avtxn.status IN (" . AVTXNS_TXN_STATUS_LOCKED . ", " . AVTXNS_TXN_STATUS_OPEN . ")";
  if ($transaction_kind == 'purchase') {
    //$ctd = avclients_client_types(AVCLIENT_TYPE_VENDOR);
    $header['qty_purchased'] = array('data' => 'Purchased', 'field' => 'qty_purchased', 'class' => array('uk-text-right'));
    $header['total_cost'] = array('data' => 'Total Purchase Cost', 'field' => 'total_cost', 'class' => array('uk-text-right'));
    $select[] = 'SUM(avtxn_detail.qty * avtxn_detail.qty_per_uom) AS qty_purchased';
    $select[] = 'SUM(
      avtxn_detail.qty
      * avtxn_detail.cost
      * (IF(avtxn_detail.discount1, (1 - avtxn_detail.discount1 / 100), 1))
      * (IF(avtxn_detail.discount2, (1 - avtxn_detail.discount2 / 100), 1))
      * (IF(avtxn_detail.discount3, (1 - avtxn_detail.discount3 / 100), 1))
      * (IF(avtxn_detail.discount4, (1 - avtxn_detail.discount4 / 100), 1))
    ) AS total_cost';
    $where[] = "avtxn.transaction_type = :txn_type_bill";
    $args[':txn_type_bill'] = AVTXNS_TXN_TYPE_BILL;
    if (empty($_GET['order'])) {
      $_GET['order'] = 'Total Purchase Cost';
      $_GET['sort'] = 'desc';
    }
  }
  elseif ($transaction_kind == 'sales') {
    //$ctd = avclients_client_types(AVCLIENT_TYPE_CUSTOMER);
    $header['qty_sold'] = array('data' => 'Sold', 'field' => 'qty_sold', 'class' => array('uk-text-right'));
    $header['total_sales'] = array('data' => 'Total Sales', 'field' => 'total_sales', 'class' => array('uk-text-right'));
    $select[] = 'SUM(avtxn_detail.qty * avtxn_detail.qty_per_uom) AS qty_sold';
    $select[] = 'SUM(
      avtxn_detail.qty
      * avtxn_detail.cost
      * (IF(avtxn_detail.discount1, (1 - avtxn_detail.discount1 / 100), 1))
      * (IF(avtxn_detail.discount2, (1 - avtxn_detail.discount2 / 100), 1))
      * (IF(avtxn_detail.discount3, (1 - avtxn_detail.discount3 / 100), 1))
      * (IF(avtxn_detail.discount4, (1 - avtxn_detail.discount4 / 100), 1))
    ) AS total_sales';
    $where[] = "avtxn.transaction_type = :txn_type_invoice";
    $where[] = "avtxn_detail.ref_txn_type = :txn_type_delivery";
    $args[':txn_type_invoice'] = AVTXNS_TXN_TYPE_INVOICE;
    $args[':txn_type_delivery'] = AVTXNS_TXN_TYPE_DELIVERY;
    $joins[] = 'LEFT JOIN {avtbl_categories} AS avcat_area ON avcat_area.id = avclients.area_id';
    if (empty($_GET['order'])) {
      $_GET['order'] = 'Total Sales';
      $_GET['sort'] = 'desc';
    }
  }

  // @todo Apply default date from and date to on transactions.
  // Add today filter.
  //if (empty($user_filter['date_to'])) {
  //  $today = format_date(time(), 'custom', 'F d, Y');
  //  $today_timestamp = strtotime($today);
  //  $where[] = "avtxn.transaction_date >= $timestamp AND avtxn.transaction_date < $next_day_timestamp";
  //}



  // Set table pagination and sort settings.
  if (!empty($user_filter['settings']['table_href'])) {
    $table_ajax_href = $user_filter['settings']['table_href'];
    $href_parts = parse_url($table_ajax_href);
    if (!empty($href_parts['query'])) {
      parse_str($href_parts['query'], $href_query);
      foreach ($href_query as $k => $v) {
        $_GET[$k] = $v;
      }
    }
  }

  $order_by = avbase_build_header_order_array($header);
  $group_by = array();
  $group_by = array('avproducts.id');
  $records = avtxns_product_query_load($where, $args, NULL, NULL, $order_by, $select, $joins, $group_by);
  $rows = array();
  $index = 0;
  $total1 = $total2 = 0;
  foreach ($records as $row) {
    $rows[$index] = array(
      'data' => array(
        'placeholder' => array('data' => $index + 1, 'class' => array('suk-hidden')),
        'item_name' => check_plain($row->title),
        'onhand_qty' => number_format($row->qty),
      ),
      //'class' => array($row_class),
    );

    if ($transaction_kind == 'purchase') {
      $rows[$index]['data']['qty_purchased'] = array('data' => number_format($row->qty_purchased), 'class' => array('uk-text-right'));
      $rows[$index]['data']['total_cost'] = array('data' => number_format($row->total_cost, 2), 'class' => array('uk-text-right'));
      $total1 += $row->qty_purchased;
      $total2 += $row->total_cost;
    }
    elseif ($transaction_kind == 'sales') {
      $rows[$index]['data']['qty_sold'] = array('data' => number_format($row->qty_sold), 'class' => array('uk-text-right'));
      $rows[$index]['data']['total_sales'] = array('data' => number_format($row->total_sales, 2), 'class' => array('uk-text-right'));
      $total1 += $row->qty_sold;
      $total2 += $row->total_sales;
    }
    $index++;
  }
  $rows['spacer'] = array('data' => array('-' => array('colspan' => 10)));
  $rows['total'] = array(
    'data' => array(
      '-' => array('data' => 'Total', 'colspan' => 4),
      //'total1' => array('data' => number_format($total1), 'class' => array('uk-text-right uk-text-bold')),
      'total2' => array('data' => number_format($total2, 2), 'class' => array('uk-text-right uk-text-bold')),
    ),
    //'class' => array(''),
  );

  $table_attributes = array(
    'id' => 'transaction-list-table',
    'class' => array('uk-table-condensed printable'),
  );

  $pager_html = empty($options['#hide_filter_form']) ? theme('pager', array('tags' => array())) : '';
  $table = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => '<div class="uk-text-muted">' . t('No match found.') . '</div>',
    '#attributes' => $table_attributes,
    //'#prefix' => '<div id="transaction-list-table-wrapper">',
    //'#suffix' => $pager_html . '<!--Do not remove me.--></div>',
  );
  $form['transaction_list_table'] = array(
    '#type' => 'container',
    '#theme' => 'avreports_inventory_ranking',
    '#attributes' => array(
      'id' => 'transaction-list-table-wrapper',
      'class' => array('printable')
    ),
  );
  //$transaction_list_table['table']['#markup'] = '<!--Do not remove me-->' . $table_markup;
  $transaction_list_table['table'] = $table;
  //if (!empty($rows)) {
    $client_name = empty($user_filter['avclients.display_name']) ? '' : $user_filter['avclients.display_name'];
    $client = NULL;
    if (!empty($client_name)) {
      $client = avclient_query_load(array('avclients.display_name = :name'), array(':name' => $client_name));
      $client = array_shift($client);
    }
    avtxns_txn_list_table_add_date_from($transaction_list_table, $user_filter);
    $transaction_list_table['client_name'] = array(
      '#title' => $ctd['name'],
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => empty($client_name) ? '' : check_plain($client_name),
      '#access' =>  !empty($client_name),
    );
    $transaction_list_table['address'] = array(
      '#title' => 'Address',
      '#title_display' => 'none',
      '#type' => 'item',
      '#markup' => isset($client->address_string) ? nl2br($client->address_string) : '',
      '#access' => isset($client->address_string),
    );
    $transaction_list_table['phone'] = array(
      '#title' => 'Contact #',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($client->contact_number) ? '' : check_plain($client->contact_number),
      '#access' => !empty($client->contact_number),
    );
    $transaction_list_table['agent_name'] = array(
      '#title' => 'Agent',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($user_filter['avcat_agent.title']) ? '' : check_plain($user_filter['avcat_agent.title']),
      '#access' =>  !empty($user_filter['avcat_agent.title']),
    );
    $transaction_list_table['principal_name'] = array(
      '#title' => 'Principal',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($user_filter['avcat_principal.title']) ? '' : check_plain($user_filter['avcat_principal.title']),
      '#access' =>  !empty($user_filter['avcat_principal.title']),
    );
    $transaction_list_table['area_name'] = array(
      '#title' => 'Area',
      '#title_display' => 'inline-before',
      '#type' => 'item',
      '#markup' => empty($user_filter['avcat_area.title']) ? '' : check_plain($user_filter['avcat_area.title']),
      '#access' =>  !empty($user_filter['avcat_area.title']),
    );
  //}
  $form['transaction_list_table'] += $transaction_list_table;

  $form['buttons']['#theme'] = 'avbase_crud_button_group';
  $form['buttons']['print'] = array(
    '#id' => 'av-print-btn',
    '#type' => 'button',
    '#value' => t('Print...'),
    '#visible_in_view_mode' => TRUE,
    '#attributes' => array('class' => array('')),
    '#icon_key' => 'print',
  );
  return $form;
}

function avreports_list() {
  return array(
    'accounting' => 'Accounting',
    'txn_list' => 'Transaction List',
    'inventory' => 'Inventory',
  );
}

function avreports_file_download($uri) {
  if (preg_match('/' . AVREPORTS_EXPORT_FILE_PREFIX . '(.+?)\.xls$/', $uri)) {
    return array(
      'Content-type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'Content-Disposition' => 'attachment; filename="export.xls"',
    );
  }
}
