<?php

/**
 * @file
 * AV Products module.
 */

define('AVPRODUCTS_MODULE_PATH', drupal_get_path('module', 'avproducts'));

require_once 'inc/helpers.inc';

/**
 * Implementation of hook_menu().
 */
function avproducts_menu() {
  $items['av/products'] = array(
    'title' => 'Products',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avproducts_home_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    'expanded' => TRUE,
  );
  $items['av/products/add'] = array(
    'title' => 'New product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avproducts_product_form', NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/crud.inc',
    'weight' => 10,
  );
  $items['av/products/%avproduct/view'] = array(
    'title' => 'View',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avproducts_product_form', 2, TRUE),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/crud.inc',
    'weight' => 0,
  );
  $items['av/products/%avproduct/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avproducts_product_form', 2),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/crud.inc',
    'weight' => 1,
  );
  $items['av/products/%avproduct/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avproducts_product_delete_confirm_form', 2),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/crud.inc',
    'weight' => 2,
  );
  $items['av/products/autocomplete'] = array(
    'title' => 'Products Autocomplete',
    'page callback' => 'avproducts_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/helpers.inc',
  );
  $items['av/product-uom/autocomplete/%'] = array(
    'title' => 'Product UOM Advanced Dropdown',
    'page callback' => 'avproducts_product_uom_dropdown',
    'page arguments' => array(3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/helpers.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avproducts_theme($existing, $type, $theme, $path) {
  $forms_template_path = $path . '/templates';
  $form_names = array(
    'avproducts_product_form',
    'avproducts_home_form',
    'uom_multiple',
    'avproducts_product_list_filter_form',
  );

  $theme_forms = array();
  foreach ($form_names as $form_name) {
    $theme_forms[$form_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $form_name),
      'path' => $forms_template_path,
    );
  }

  return $theme_forms;
}

/**
 * Products homepage form.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function avproducts_home_form($form, &$form_state) {
  $form['#attributes']['autocomplete'] = 'off';
  $btn_options = array('attributes' => array('class' => AV_STYLE_CLASS_BTN . ' ' . AV_STYLE_CLASS_BTN_PRIMARY));
  $form['new_button'] = array('#markup' => l('New product', 'av/products/add', $btn_options));

  $user_filter = empty($form_state['values']['avproducts_pl_filter']) ? array() : $form_state['values']['avproducts_pl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $and = empty($filter_query['and']) ? array() : $filter_query['and'];
  $or = empty($filter_query['or']) ? array() : $filter_query['or'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];


  // Set page.
  if (!empty($user_filter['settings']['page_num'])) {
    $_GET['page'] = $user_filter['settings']['page_num'];
  }

  $form['filter'] = avproduct_list_filter_form(NULL, $form_state);

  $header = array(
    array('data' => 'ID', 'field' => 'id', 'sort' => 'desc', 'class' => array('uk-hidden')),
    array('data' => 'Name', 'field' => 'title'),
    array('data' => 'Category', 'field' => 'category_id'),
    array('data' => 'Base UOM', 'field' => 'uom_id'),
    //array('data' => 'Description', 'field' => 'description'),
    array('data' => 'Cost', 'field' => 'cost', 'style' => 'width: 100px; text-align: right'),
    array('data' => 'Sales price', 'field' => 'price', 'style' => 'width: 100px; text-align: right'),
    array('data' => 'Qty.', 'field' => 'qty', 'style' => 'width: 70px; text-align: right'),
    array('data' => 'ROP', 'field' => 'rop', 'class' => array('uk-text-right')),
    '&nbsp;',
  );

  $query = db_select('avtbl_products', 'avprod')
    ->fields('avprod')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->limit(10)
    ->orderByHeader($header);
  if (!empty($or)) {
    $db_or = db_or();
    foreach ($or as $v) {
      list($cond_field_name, $cond_value, $cond_operator) = $v;
      $db_or->condition($cond_field_name, $cond_value, $cond_operator);
    }
    $query->condition($db_or);
  }
  if (!empty($and)) {
    foreach ($and as $v) {
      list($cond_field_name, $cond_value, $cond_operator) = $v;
      $query->condition($cond_field_name, $cond_value, $cond_operator);
    }
  }
  if (!empty($where)) {
    foreach ($where as $v) {
      $query->where($v);
    }
  }
  $result = $query->execute();

  $categories = avbase_get_categories_multiple(array('product_cat', 'uom'));
  $rows = array();
  foreach ($result as $row) {
    $menu_prefix = 'av/products/' . $row->id;
    $action_links = array('links' => array(
      'edit' => array('title' => 'edit', 'href' => $menu_prefix . '/edit', 'icon_kedy' => 'edit', 'query' => drupal_get_destination()),
      //'delete' => array('title' => 'delete', 'href' => $menu_prefix . '/delete', 'icond_key' => 'remove', 'query' => drupal_get_destination()),
    ));

    $actions_html = theme('links__bare', $action_links);
    $linked_name = l($row->title, $menu_prefix . '/view');
    $rows[] = array(
      'data' => array(
        'id' => array('data' => $row->id, 'class' => array('uk-hidden')),
        'display_name' => $linked_name,
        'category' => isset($categories[$row->category_id]) ? check_plain($categories[$row->category_id]->title) : '',
        'uom' => isset($categories[$row->uom_id]) ? check_plain($categories[$row->uom_id]->title) : '',
        //'description' => truncate_utf8(check_plain($row->description), 90, FALSE, TRUE),
        'cost' => array('data' => number_format($row->cost, 2), 'style' => 'text-align: right'),
        'price' => array('data' => number_format($row->price, 2), 'style' => 'text-align: right'),
        'qty' => array('data' => number_format($row->qty), 'style' => 'text-align: right'),
        'rop' => array('data' => number_format($row->rop), 'style' => 'text-align: right'),
        'actions' => $actions_html,
      ),
      'class' => array('uk-table-middle'),
    );
  }

  $table_attributes = array('id' => 'products-list-table');
  if (empty($rows)) {
    $table_markup = '<div class="uk-text-muted">Nothing recorded yet.</div>';
  }
  else {
    $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes));
  }


  $form['table']['#markup'] = '<div id="products-list-table-wrapper">' . $table_markup . theme('pager', array('tags' => array())) . '<!--Do not remove me.--></div>';
  //$form['pager']['#markup'] = theme('pager', array('tags' => array()));
//$form['#after_build'] = array('avproducts_home_form_after_build');
//  $form['ag-grid']['#markup'] = '<div id="myGrid" style="height: 300px;" class="ag-fresh"></div>';
  return $form;
}

function avproducts_home_form_after_build($form, &$form_state) {
  dpm('f');
  dpm($form);
  return $form;
}

function avproduct_list_filter_form($form, &$form_state, $settings = array()) {
  $fields = array(
    '#theme' => 'avproducts_product_list_filter_form',
    '#tree' => TRUE,
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'avproducts-product-list-filter-form',
    ),
    '#attached' => array(
      'js' => array(AVPRODUCTS_MODULE_PATH . '/js/products_list_filter.form.js'),
    ),
  );

  $fields['search_text'] = empty($settings['search_text']) ? array() : $settings['search_text'];
  $fields['search_text'] += array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('trigger-ajax-search trigger-search-on-keyup'),
      'placeholder' => 'search by title or code',
    ),
    '#icon_key' => 'search',
  );

  $fields['avprod.category_id'] = empty($settings['avprod.category_id']) ? array() : $settings['avprod.category_id'];
  $fields['avprod.category_id'] = array(
    '#type' => 'select',
    //'#title' => 'Category',
    '#options' => avbase_get_category_options_array('product_cat'),
    '#empty_value' => '',
    '#empty_option' => '',
    '#attributes' => array(
      'class' => array('trigger-ajax-search'),
    ),
  );

  $fields['low_stock'] = empty($settings['low_stock']) ? array() : $settings['low_stock'];
  $fields['low_stock'] = array(
    '#type' => 'checkbox',
    '#title' => 'Low stock',
    '#button_checkbox' => TRUE,
    '#default_value' => 1,
    '#attributes' => array(
      'class' => array('trigger-ajax-search'),
    ),
  );

  $fields['no_stock'] = empty($settings['no_stock']) ? array() : $settings['no_stock'];
  $fields['no_stock'] = array(
    '#type' => 'checkbox',
    '#title' => 'Out of stock',
    '#button_checkbox' => TRUE,
    //'#default_value' => 1,
    '#attributes' => array(
      'class' => array('trigger-ajax-search'),
    ),
  );


  // Buttons.
  $fields['buttons']['reset_button'] = empty($settings['reset_button']) ? array() : $settings['reset_button'];
  $fields['buttons']['reset_button'] += array(
    '#id' => 'product-list-reset-btn',
    '#type' => 'submit',
    '#value' => t('reset'),
    '#attributes' => array(
      'class' => array('uk-margin-small-left'),
    ),
  );

  $fields['buttons']['search_button'] = empty($settings['search_button']) ? array() : $settings['search_button'];
  $fields['buttons']['search_button'] += array(
    '#id' => 'product-list-search-btn',
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('avproducts_product_list_filter_form_submit'),
    '#limit_validation_errors' => array(array('avproducts_pl_filter')),
    '#attributes' => array(
      'class' => array('uk-hidden')
    ),
    '#ajax' => array(
      'callback' => 'avproducts_product_list_filter_form_ajax',
      'wrapper' => 'products-list-table-wrapper',
      'effect' => 'none',
      'event' => 'click',
      'progress' => array(),
    ),
  );

  $fields['settings']['page_num'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'id' => 'product-list-page-num',
      'class' => array('trigger-ajax-search'),
    ),
  );

  $form['avproducts_pl_filter'] = $fields;
  return $form;
}

function avproducts_product_list_filter_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $filter_values = empty($form_state['values']['avproducts_pl_filter']) ? array() : $form_state['values']['avproducts_pl_filter'];
  $and = $or = $where = array();
  foreach ($filter_values as $k => $v) {
    if ($k == 'buttons') {
      continue;
    }
    $v = trim($v);
    if ($k == 'search_text' && $v != '') {
      $or[] = array('avprod.title', '%' . db_like($v) . '%', 'LIKE');
      continue;
    }
    elseif ($k == 'low_stock') {
      if ($v) {
        $where[] = 'avprod.qty < avprod.rop';
      }
      continue;
    }
    elseif ($k == 'no_stock') {
      if ($v) {
        $where[] = 'avprod.qty = 0';
      }
      continue;
    }

    if ($v != '') {
      $and[] = array($k, $v, '=');
    }
  }

  $form_state['values']['avproducts_pl_filter']['filter_query'] = array('and' => $and, 'or' => $or, 'where' => $where);
}


function avproducts_product_list_filter_form_ajax($form, $form_state) {
  $trigger = $form_state['triggering_element'];
  switch ($trigger['#id']) {
    case 'product-list-search-btn':
      $target_table_parents = $trigger['#array_parents'];
      $depth = count($target_table_parents) - 4;
      if ($depth > 0) {
        $target_table_parents = array_slice($target_table_parents, 0, $depth);
      }
      else {
        $target_table_parents = empty($trigger['#table_parents']) ? array() : $trigger['#table_parents'];
      }
      $target_table_parents[] = 'table';
      $transaction_list_form = drupal_array_get_nested_value($form, $target_table_parents);
      //dpm($form);
      //dpm($target_table_parents);
      //dpm($transaction_list_form);
      //return $form;
      return $transaction_list_form;
      break;
  }

  return $form;
}