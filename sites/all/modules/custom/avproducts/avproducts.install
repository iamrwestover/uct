<?php

/**
 * Implementation of hook_schema().
 * @return mixed
 */
function avproducts_schema() {
  $schema['avtbl_products'] = array(
    'description' => 'Products',
    'fields' => array(
      'id' => array(
        'description' => 'Product ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      //'code' => array(
      //  'description' => 'Product code',
      //  'type' => 'varchar',
      //  'length' => '32',
      //  'not null' => FALSE,
      //),
      'title' => array(
        'description' => 'Product title',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'category_id' => array(
        'description' => 'Category ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'Product description',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'qty' => array(
        'description' => 'Actual on-hand quantity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'initial_qty' => array(
        'description' => 'Initial product quantity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'initial_value' => array(
        'description' => 'Initial value',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
      ),
      'initial_qty_date' => array(
        'description' => 'Date when initial quantity was received.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uom_id' => array(
        'description' => 'Unit of measure - Category ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rop' => array(
        'description' => 'Reorder point',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'eoq' => array(
        'description' => 'Economic order quantity',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'cost' => array(
        'description' => 'Unit cost',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'precision' => '18',
        'scale' => '6',
      ),
      'price' => array(
        'description' => 'Unit price',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'precision' => '18',
        'scale' => '6',
      ),
      'expiry_date' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'lot_no' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'vendor_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'account_type_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'shelf_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'principal_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'discount1' => array(
        'description' => 'Discount 1',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'precision' => '5',
        'scale' => '2',
      ),
      'discount2' => array(
        'description' => 'Discount 2',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'precision' => '5',
        'scale' => '2',
      ),
      'discount3' => array(
        'description' => 'Discount 3',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'precision' => '5',
        'scale' => '2',
      ),
      'discount4' => array(
        'description' => 'Discount 4',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'precision' => '5',
        'scale' => '2',
      ),
      'data' => array(
        'description' => 'Miscellaneous product info',
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Timestamp when the record is created',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      //'code' => array('code'),
      'title' => array('title')
    ),
    'indexes' => array(
      'category_id' => array('category_id'),
      'expiry_date' => array('expiry_date'),
      'status' => array('status'),
      'supplier_id' => array('vendor_id'),
      'uid' => array('uid'),
    ),
  );

  return $schema;
}

/**
 * Increase decimal precision of discount fields.
 */
function avproducts_update_7101() {
  $schema = avproducts_schema();
  $table_name = 'avtbl_products';
  $fields = $schema[$table_name]['fields'];

  $field_name = 'discount1';
  db_change_field($table_name, $field_name, $field_name, $fields[$field_name]);
  $field_name = 'discount2';
  db_change_field($table_name, $field_name, $field_name, $fields[$field_name]);
  $field_name = 'discount3';
  db_change_field($table_name, $field_name, $field_name, $fields[$field_name]);
  $field_name = 'discount4';
  db_change_field($table_name, $field_name, $field_name, $fields[$field_name]);
  return t('Successfully increased decimal precision of discount fields.');
}

/**
 * Rescan all transactions to ensure integrity of current onhand quantity, once and for all.
 */
function avproducts_update_7102(&$sandbox) {
  $ret = array();
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_row_id'] = 0;
    $query = "SELECT COUNT(id) FROM {avtbl_products}";
    $sandbox['max'] = db_query($query)->fetchField();
  }

  $limit = 5;

  // Get initial product details.
  $query = "SELECT id, initial_qty FROM {avtbl_products}
    WHERE id > :gg ORDER BY id LIMIT $limit";
  $product_rows = db_query($query, array(':gg' => $sandbox['last_row_id']))->fetchAllAssoc('id');
  // watchdog('s', serialize($sandbox['progress']));
  if (!empty($product_rows)) {
    foreach ($product_rows as $product) {
      $query = "SELECT
      " . avtxns_txn_detail_qty_query("avtxn.transaction_type IN (:inc_types)") . " onhand
      FROM {avtbl_transaction_details} avtxn_detail
      INNER JOIN {avtbl_transactions} avtxn ON avtxn.id = avtxn_detail.transaction_id
      WHERE avtxn_detail.item_id = :item_id
      AND avtxn.status <> :void_status AND avtxn.transaction_type IN (:qty_change_types)";
      // Order by.
      // $order_by = array();
      // $order_by[] = 'avtxn.transaction_date';
      // $order_by[] = 'avtxn.id';
      // if (!empty($order_by)) {
      //   $query .= " ORDER BY " . implode(', ', $order_by);
      // }
      $onhand = db_query($query, array(
        ':item_id' => $product->id,
        ':void_status' => AVTXNS_TXN_STATUS_VOID,
        ':inc_types' => avtxns_get_qty_change_txn_types('increment'),
        ':qty_change_types' => avtxns_get_qty_change_txn_types(),
      ))->fetchField();
      $onhand = empty($onhand) ? 0 : $onhand;
      // dpm($onhand);
      // Add current onhand qty.
      $onhand += $product->initial_qty;
      // dpm($onhand);
      // Do update.
      db_query("UPDATE {avtbl_products} SET qty = :qty WHERE id = :id", array(
        ':qty' => $onhand,
        ':id' => $product->id
      ));
      $sandbox['last_row_id'] = $product->id;
      $sandbox['progress']++;
    }
  }
  else {
    $sandbox['progress'] = $sandbox['max'];
  }


  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];
  // $sandbox['#finished'] = 1;
}

