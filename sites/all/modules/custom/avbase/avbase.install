<?php

/**
 * Implements hook_enable().
 */
function avbase_enable() {
  $t = get_t();

  // Create a custom menu, if Menu module is enabled.
  // @see avbase_modules_installed()
  if (module_exists('menu')) {
    $menu = array(
      'menu_name' => 'av',
      'title' => $t('AV Menu'),
      'description' => $t('AV AIS links'),
    );
    menu_save($menu);
  }
}

/**
 * Implementation of hook_schema().
 * @return array
 */
function avbase_schema() {
  $schema['avtbl_categories'] = array(
    'description' => 'Categories',
    'fields' => array(
      'id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Category title',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Category description',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'system_default' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'group_id' => array(
        'description' => 'Category group ID',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'Weight for sorting.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'group_id' => array('group_id'),
    ),
  );

  $schema['avtbl_users'] = array(
    'description' => 'TODO: please describe this table!',
    'fields' => array(
      'id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'first_name' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'last_name' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'contact_number' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'address' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'uid' => array('uid')
    ),
    'indexes' => array(
      'first_name' => array('first_name'),
      'last_name' => array('last_name'),
    ),
  );

  $schema['avtbl_watchdog'] = array(
    'description' => 'Table that contains logs of all system events.',
    'fields' => array(
      'wid' => array(
        'description' => 'Primary Key: Unique watchdog event ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The users.uid of the user who triggered the event.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Type of log message, for example "user" or "page not found."',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'description' => 'Text of log message to be passed into the t() function.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'variables' => array(
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'severity' => array(
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'link' => array(
        'description' => 'Link to view the result of the event.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'location' => array(
        'description' => 'URL of the origin of the event.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'referer' => array(
        'description' => 'URL of referring page.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'hostname' => array(
        'description' => 'Hostname of the user who triggered the event.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp of when event occurred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('wid'),
    'indexes' => array(
      'severity' => array('severity'),
      'type' => array('type'),
      'uid' => array('uid'),
    ),
  );

  $schema['avtbl_fs'] = array(
    'description' => 'Cache data for FS reports',
    'fields' => array(
      'account_id' => array(
        'description' => 'Account ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'before_this_day' => array(
        'description' => 'Day timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'amount' => array(
        'description' => 'Total amount',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
      ),
      // 'onhand' => array(
      //   'description' => 'Actual on-hand quantity.',
      //   'type' => 'int',
      //   'not null' => FALSE,
      //   'default' => NULL,
      // ),
      // 'cost' => array(
      //   'description' => 'Product cost',
      //   'type' => 'numeric',
      //   'default' => NULL,
      //   'not null' => FALSE,
      //   'precision' => '18',
      //   'scale' => '6',
      // ),
    ),
    'primary key' => array('account_id', 'before_this_day'),
  );

  $schema['avtbl_inventory_cache'] = array(
    'description' => 'Cache data for Inventory data',
    'fields' => array(
      'product_id' => array(
        'description' => 'Product ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'before_this_day' => array(
        'description' => 'Day timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'item_cost' => array(
        'description' => 'The relative item cost',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
      ),
      'qty_out' => array(
        'description' => 'Total released quantity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'qty_in' => array(
        'description' => 'Total received quantity',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'qty_in_amount' => array(
        'description' => 'Cost of goods available for sale',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
      ),
    ),
    'primary key' => array('product_id', 'before_this_day'),
  );

  return $schema;
}

/**
 * Database optimizations:
 * - Update custom watchdog table to remove variables data.
 * - Exclude {batch} and {queue} tables from all backup profile settings.
 */
function avbase_update_7101() {
  db_query("UPDATE {avtbl_watchdog} SET variables = ''");
  db_query("OPTIMIZE TABLE {avtbl_watchdog}");

  $query = "SELECT profile_id, filters FROM {backup_migrate_profiles}";
  $rs = db_query($query);
  foreach ($rs as $row) {
    $filters = unserialize($row->filters);

    $tables = array(
      'batch',
      'queue',
    );
    foreach ($tables as $t) {
      $filters['sources']['db']['nodata_tables'][$t] = $t;
    }

    $filters = serialize($filters);
    db_query("UPDATE {backup_migrate_profiles} SET filters = :filters WHERE profile_id = " . $row->profile_id, array(':filters' => $filters));
  }
  return t('Database optimization processes finished.');
}

/**
 * Configure backup profiles to always use command line tools.
 */
function avbase_update_7102() {
  $query = "SELECT profile_id, filters FROM {backup_migrate_profiles}";
  $rs = db_query($query);
  foreach ($rs as $row) {
    $filters = unserialize($row->filters);
    $filters['use_cli'] = 1;
    $filters = serialize($filters);
    db_query("UPDATE {backup_migrate_profiles} SET filters = :filters WHERE profile_id = " . $row->profile_id, array(':filters' => $filters));
  }
  return t('Backup profiles updated.');
}

/**
 * Configuration updates.
 */
function avbase_update_7103() {
  variable_set('site_403', 'user/login');
}

/**
 * Add cache table for FS reports.
 */
function avbase_update_7104() {
  $schema = avbase_schema();
  $table_name = 'avtbl_fs';
  $table = $schema[$table_name];
  db_create_table($table_name, $table);
}

/**
 * Accounting chart table fixes..
 */
function avbase_update_7105() {
  db_query("UPDATE {avtbl_account_chart} SET fixed = NULL, status = 0 WHERE id = 8");
}

/**
 * Changes to product table.
 */
function avbase_update_7106() {
  db_query("UPDATE {avtbl_products} SET initial_value = (initial_value / initial_qty) WHERE initial_qty > 0");
}

/**
 * Add table for Inventory and COGS data cache.
 */
function avbase_update_7107() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $table = $schema[$table_name];
  db_create_table($table_name, $table);
}

/**
 * Database optimizations:
 * - Exclude {avtbl_reserved_qty}, {avtbl_fs} and {avtbl_inventory_cache} tables from all backup profile settings.
 */
function avbase_update_7108() {
  $query = "SELECT profile_id, filters FROM {backup_migrate_profiles}";
  $rs = db_query($query);
  foreach ($rs as $row) {
    $filters = unserialize($row->filters);

    $tables = array(
      'avtbl_reserved_qty',
      'avtbl_fs',
      'avtbl_inventory_cache',
    );
    foreach ($tables as $t) {
      $filters['sources']['db']['nodata_tables'][$t] = $t;
    }

    $filters = serialize($filters);
    db_query("UPDATE {backup_migrate_profiles} SET filters = :filters WHERE profile_id = " . $row->profile_id, array(':filters' => $filters));
  }
  return t('Database optimization processes finished.');
}
