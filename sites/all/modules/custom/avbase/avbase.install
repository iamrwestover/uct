<?php

/**
 * Implements hook_enable().
 */
function avbase_enable() {
  $t = get_t();

  // Create a custom menu, if Menu module is enabled.
  // @see avbase_modules_installed()
  if (module_exists('menu')) {
    $menu = array(
      'menu_name' => 'av',
      'title' => $t('AV Menu'),
      'description' => $t('AV AIS links'),
    );
    menu_save($menu);
  }
}

/**
 * Implementation of hook_schema().
 * @return array
 */
function avbase_schema() {
  $schema['avtbl_categories'] = array(
    'description' => 'Categories',
    'fields' => array(
      'id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Category title',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Category description',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'system_default' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'group_id' => array(
        'description' => 'Category group ID',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'Weight for sorting.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'group_id' => array('group_id'),
    ),
  );

  $schema['avtbl_users'] = array(
    'description' => 'TODO: please describe this table!',
    'fields' => array(
      'id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'first_name' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'last_name' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'contact_number' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'address' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'uid' => array('uid')
    ),
    'indexes' => array(
      'first_name' => array('first_name'),
      'last_name' => array('last_name'),
    ),
  );

  $schema['avtbl_watchdog'] = array(
    'description' => 'Table that contains logs of all system events.',
    'fields' => array(
      'wid' => array(
        'description' => 'Primary Key: Unique watchdog event ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The users.uid of the user who triggered the event.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Type of log message, for example "user" or "page not found."',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'description' => 'Text of log message to be passed into the t() function.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'variables' => array(
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'severity' => array(
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'link' => array(
        'description' => 'Link to view the result of the event.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'location' => array(
        'description' => 'URL of the origin of the event.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'referer' => array(
        'description' => 'URL of referring page.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'hostname' => array(
        'description' => 'Hostname of the user who triggered the event.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp of when event occurred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('wid'),
    'indexes' => array(
      'severity' => array('severity'),
      'type' => array('type'),
      'uid' => array('uid'),
    ),
  );

  $schema['avtbl_fs'] = array(
    'description' => 'Cache data for FS reports',
    'fields' => array(
      'account_id' => array(
        'description' => 'Account ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'before_this_day' => array(
        'description' => 'Day timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'debit' => array(
        'description' => 'Debit amount',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
      'credit' => array(
        'description' => 'Credit amount',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
    ),
    'primary key' => array('account_id', 'before_this_day'),
  );

  $schema['avtbl_inventory_cache'] = array(
    'description' => 'Cache data for Inventory data',
    'fields' => array(
      'product_id' => array(
        'description' => 'Product ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'before_this_day' => array(
        'description' => 'Day timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'item_cost' => array(
        'description' => 'The relative item cost',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
      ),
      'beg_qty' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'beg_cost' => array(
        'description' => 'Beginning unit cost',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
      'end_cost' => array(
        'description' => 'Ending unit cost',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_RECEIVE . '_qty' => array( // A fixed cost and a qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN . '_qty' => array( // A fixed cost and a qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_PURCHASE_RETURN . '_qty' => array( // A fixed cost and a qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT . '_qty' => array( // A fixed cost and a qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_DELIVERY . '_qty' => array( // A qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_SALES_RETURN . '_qty' => array( // A qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_STOCK_ADJUSTMENT . '_qty' => array( // A qty-change transaction type.
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_RECEIVE . '_amt' => array(
        'description' => 'Cost of received items',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN . '_amt' => array(
        'description' => 'Cost of transferred-in items',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_PURCHASE_RETURN . '_amt' => array(
        'description' => 'Cost of pr items',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
      AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT . '_amt' => array(
        'description' => 'Cost of transferred-out items',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => '18',
        'scale' => '6',
        'default' => 0,
      ),
    ),
    'primary key' => array('product_id', 'before_this_day'),
  );

  return $schema;
}

/**
 * Database optimizations:
 * - Update custom watchdog table to remove variables data.
 * - Exclude {batch} and {queue} tables from all backup profile settings.
 */
function avbase_update_7101() {
  db_query("UPDATE {avtbl_watchdog} SET variables = ''");
  db_query("OPTIMIZE TABLE {avtbl_watchdog}");

  $query = "SELECT profile_id, filters FROM {backup_migrate_profiles}";
  $rs = db_query($query);
  foreach ($rs as $row) {
    $filters = unserialize($row->filters);

    $tables = array(
      'batch',
      'queue',
    );
    foreach ($tables as $t) {
      $filters['sources']['db']['nodata_tables'][$t] = $t;
    }

    $filters = serialize($filters);
    db_query("UPDATE {backup_migrate_profiles} SET filters = :filters WHERE profile_id = " . $row->profile_id, array(':filters' => $filters));
  }
  return t('Database optimization processes finished.');
}

/**
 * Configure backup profiles to always use command line tools.
 */
function avbase_update_7102() {
  $query = "SELECT profile_id, filters FROM {backup_migrate_profiles}";
  $rs = db_query($query);
  foreach ($rs as $row) {
    $filters = unserialize($row->filters);
    $filters['use_cli'] = 1;
    $filters = serialize($filters);
    db_query("UPDATE {backup_migrate_profiles} SET filters = :filters WHERE profile_id = " . $row->profile_id, array(':filters' => $filters));
  }
  return t('Backup profiles updated.');
}

/**
 * Configuration updates.
 */
function avbase_update_7103() {
  variable_set('site_403', 'user/login');
}

/**
 * Add cache table for FS reports.
 */
function avbase_update_7104() {
  $schema = avbase_schema();
  $table_name = 'avtbl_fs';
  $table = $schema[$table_name];
  db_create_table($table_name, $table);
}

/**
 * Accounting chart table fixes..
 */
function avbase_update_7105() {
  db_query("UPDATE {avtbl_account_chart} SET fixed = NULL, status = 0 WHERE id = 8");
}

/**
 * Changes to product table.
 */
function avbase_update_7106() {
  db_query("UPDATE {avtbl_products} SET initial_value = (initial_value / initial_qty) WHERE initial_qty > 0");
}

/**
 * Add table for Inventory and COGS data cache.
 */
function avbase_update_7107() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $table = $schema[$table_name];
  db_create_table($table_name, $table);
}

/**
 * Database optimizations:
 * - Exclude {avtbl_reserved_qty}, {avtbl_fs} and {avtbl_inventory_cache} tables from all backup profile settings.
 */
function avbase_update_7108() {
  $query = "SELECT profile_id, filters FROM {backup_migrate_profiles}";
  $rs = db_query($query);
  foreach ($rs as $row) {
    $filters = unserialize($row->filters);

    $tables = array(
      'avtbl_reserved_qty',
      'avtbl_fs',
      'avtbl_inventory_cache',
    );
    foreach ($tables as $t) {
      $filters['sources']['db']['nodata_tables'][$t] = $t;
    }

    $filters = serialize($filters);
    db_query("UPDATE {backup_migrate_profiles} SET filters = :filters WHERE profile_id = " . $row->profile_id, array(':filters' => $filters));
  }
  return t('Database optimization processes finished.');
}

/**
 * Add "debit" and "credit" field for accounting reports cache table.
 */
function avbase_update_7109() {
  $schema = avbase_schema();
  $table_name = 'avtbl_fs';
  $fields = $schema[$table_name]['fields'];

  $field_name = 'debit';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = 'credit';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
}

/**
 * Add fields for each transaction type that changes product qty into Inventory cache table.
 */
function avbase_update_7110() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $fields = $schema[$table_name]['fields'];

  $field_name = AVTXNS_TXN_TYPE_RECEIVE . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_PURCHASE_RETURN . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_DELIVERY . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_SALES_RETURN . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_STOCK_ADJUSTMENT . '_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
}

/**
 * Add fields for rcv_amt, stin_amt, pr_amt, stou_amt into Inventory cache table.
 */
function avbase_update_7111() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $fields = $schema[$table_name]['fields'];

  $field_name = AVTXNS_TXN_TYPE_RECEIVE . '_amt';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN . '_amt';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_PURCHASE_RETURN . '_amt';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT . '_amt';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
}

/**
 * Add field "beg_qty" into Inventory cache table.
 */
function avbase_update_7112() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $fields = $schema[$table_name]['fields'];

  $field_name = 'beg_qty';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
}

/**
 * Add field "beg_amt" into Inventory cache table.
 */
function avbase_update_7113() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $fields = $schema[$table_name]['fields'];

  $field_name = 'beg_amt';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
}

/**
 * Remove deprecated fields from report cache tables.
 */
function avbase_update_7114() {
  $table_name = 'avtbl_fs';
  db_drop_field($table_name, 'amount');
  $table_name = 'avtbl_inventory_cache';
  db_drop_field($table_name, 'qty_in');
  db_drop_field($table_name, 'qty_out');
  db_drop_field($table_name, 'qty_in_amount');
}

/**
 * Changes to Inventory cache table.
 */
function avbase_update_7115() {
  $schema = avbase_schema();
  $table_name = 'avtbl_inventory_cache';
  $fields = $schema[$table_name]['fields'];

  $field_name = 'beg_cost';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);
  $field_name = 'end_cost';
  if (!db_field_exists($table_name, $field_name)) db_add_field($table_name, $field_name, $fields[$field_name]);

  db_drop_field($table_name, 'beg_amt');
  db_drop_field($table_name, 'item_cost');
}

/**
 * Add maintenance mode permission to superadmin role.
 */
function avbase_update_7116() {
  $permissions = array('access site in maintenance mode');
  $role = user_role_load_by_name('Super Admin');
  user_role_grant_permissions($role->rid, $permissions);
}

/**
 * Update initial cost of products.
 */
function avbase_update_7117(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_row_id'] = 0;
    $query = "SELECT COUNT(id) FROM {avtbl_products}";
    $sandbox['max'] = db_query($query)->fetchField();
    $sandbox['txn_types'] = avtxns_fixed_cost_types();
  }

  $limit = 1;

  // Get initial product details.
  $query = "SELECT id FROM {avtbl_products}
    WHERE id > :id AND initial_value = 0 ORDER BY id LIMIT $limit";
  $product_rows = db_query($query, array(':id' => $sandbox['last_row_id']))->fetchAllAssoc('id');
  if (!empty($product_rows)) {
    foreach ($product_rows as $product) {
      $query = "SELECT (avtxn_detail.cost / avtxn_detail.qty_per_uom) initial_cost
      FROM {avtbl_transaction_details} avtxn_detail
      INNER JOIN {avtbl_transactions} avtxn ON avtxn.id = avtxn_detail.transaction_id
      WHERE avtxn_detail.item_id = :item_id
      AND avtxn.status <> :void_status AND avtxn.transaction_type IN (:txn_types)
      ORDER BY avtxn.transaction_date ASC LIMIT 1";
      $initial_cost = db_query($query, array(
        ':item_id' => $product->id,
        ':void_status' => AVTXNS_TXN_STATUS_VOID,
        ':txn_types' => $sandbox['txn_types'],
      ))->fetchField();

      // Do update.
      if (!empty($initial_cost)) {
        db_query("UPDATE {avtbl_products} SET initial_value = :cost WHERE id = :id", array(':cost' => $initial_cost, ':id' => $product->id));
      }
      $sandbox['last_row_id'] = $product->id;
      $sandbox['progress']++;
    }
  }
  else {
    $sandbox['progress'] = $sandbox['max'];
  }


  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];
}

/*
 * CODE TO GET ITEMS WITH INITIAL COST GREATER THAN INIITIAL TRANSACTION COST. INITIAL ITEM COST SHOULD ALWAYS BE LESSER!
 */
// if (!isset($sandbox['progress'])) {
//   $sandbox['progress'] = 0;
//   $sandbox['last_row_id'] = 0;
//   $query = "SELECT COUNT(id) FROM {avtbl_products}";
//   $sandbox['max'] = db_query($query)->fetchField();
//   $sandbox['txn_types'] = avtxns_get_qty_change_txn_types();
// }
//
// $limit = 1;
//
// // Get initial product details.
// $query = "SELECT id, title, initial_value FROM {avtbl_products}
//     WHERE id > :id AND initial_qty < 1 ORDER BY id";
// $product_rows = db_query($query, array(':id' => $sandbox['last_row_id']))->fetchAllAssoc('id');
// if (!empty($product_rows)) {
//   foreach ($product_rows as $product) {
//     $query = "SELECT avtxn.id, (avtxn_detail.cost / avtxn_detail.qty_per_uom) initial_cost
//       FROM {avtbl_transaction_details} avtxn_detail
//       INNER JOIN {avtbl_transactions} avtxn ON avtxn.id = avtxn_detail.transaction_id
//       WHERE avtxn_detail.item_id = :item_id
//       AND avtxn.status <> :void_status AND avtxn.transaction_type IN (:txn_types) AND avtxn.transaction_type <> 'stk'
//       ORDER BY avtxn.transaction_date ASC LIMIT 1";
//     $r = db_query($query, array(
//       ':item_id' => $product->id,
//       ':void_status' => AVTXNS_TXN_STATUS_VOID,
//       ':txn_types' => $sandbox['txn_types'],
//     ))->fetchObject();
//
//     if (empty($r)) continue;
//
//     // Do update.
//     if ($product->initial_value > $r->initial_cost) {
//       dpm($product->id . '==' . $product->title . '==' . $product->initial_value . '==' . $r->initial_cost .  '==' . $r->id);
//     }
//     $sandbox['last_row_id'] = $product->id;
//     $sandbox['progress']++;
//   }
// }
// else {
//   $sandbox['progress'] = $sandbox['max'];
// }