<?php
/**
 * @file
 * UCT base features and functions.
 */

module_load_include('inc', 'avbase', 'inc/helpers');
module_load_include('inc', 'avbase', 'inc/crud');

define('AVBASE_MODULE_PATH', drupal_get_path('module', 'avbase'));
define('AVBASE_HELP_PATH', AVBASE_MODULE_PATH . '/inc/help');
define('AVBASE_LIBRARIES_PATH', 'sites/all/libraries');

define('AVBASE_SYSTEM_VERSION', 'v1.180621');

define('AVBASE_DISCOUNT_PERCENT', 1);
define('AVBASE_DISCOUNT_FIXED', 2);

define('AVBASE_DECIMAL_MAX', 6);
define('AVBASE_DIGITS_MAX', 12);

define('AVBASE_DECIMAL_FORMAT_MAX', 4);

define('AVBASE_PMT_METHOD_CASH', 1);
define('AVBASE_PMT_METHOD_CHECK', 2);

// Generic record status.
define('AVBASE_RECORD_DISABLED', 0);
define('AVBASE_RECORD_ACTIVE', 1);

// Permissions
define('AVBASE_PERM_SYSTEM_SETTINGS', 'avbase system settings');
define('AVBASE_PERM_SYSTEM_CATEGORIES', 'avbase system categories');
define('AVBASE_PERM_IMPORT', 'avbase system import');

// Expanded memory limit.
define('AVBASE_EXPANDED_MEMORY_LIMIT', '512M');

// Date formats.
define('AVBASE_DATE_FORMAT', 'm/d/Y');
define('AVBASE_DATE_FORMAT_JS', 'MM/DD/YYYY');
define('AVBASE_MONTH_ONLY_FORMAT', 'Y-m');
define('AVBASE_MONTH_ONLY_FORMAT_JS', 'YYYY-MM');
define('AVBASE_MONTH_ONLY_FORMAT_MASK', 'yyyy-mm');
define('AVBASE_DATE_MIN_TIMESTAMP', strtotime('first day of January this year', time()) - (60 * 60 * 24 * 365 * 5));
define('AVBASE_DATE_MAX_TIMESTAMP', strtotime('first day of January next year', time()) + (60 * 60 * 24 * 365 * 10));


/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avbase_theme($existing, $type, $theme, $path) {
  $themes = array();

  $template_path = $path . '/templates';
  $theme_names = array(
    //'avcustomers_customer_form',
    //'avcustomers_home_form',
    'avbase_user_form',
    'avbase_nestable_form',
    'avbase_nestable_form_row',
    'avbase_crud_button_group',
    'avbase_modal_form',
    'avbase_form_table',
    'avbase_entity_overview_form',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }


  // Help.
  $theme_names = array(
    'avbase_help_txn_status',
    'avbase_help_ks',
    'avbase_help_print',
    'avbase_help_sys_req',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path . '/help',
    );
  }

  // OTHERS.
  $theme_names = array(
    'avbase_modal',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }
  return $themes;
}

/**
 * Implements hook_modules_installed().
 *
 * @see avbase_install()
 */
function avbase_modules_installed($modules) {
  if (in_array('menu', $modules)) {
    $menu = array(
      'menu_name' => 'av',
      'title' => t('AV Menu'),
      'description' => t('AV AIS links'),
    );
    menu_save($menu);
  }
}


/**
 * Implementation of hook_init().
 */
function avbase_init() {
  drupal_add_js(AVBASE_MODULE_PATH . '/js/avbase.js');
  global $base_url;
  if (strstr($base_url, '//uctest.ais') === FALSE && strstr($base_url, '//uctest.av') === FALSE && strstr($base_url, '//uct.av') === FALSE) {
    drupal_access_denied();
  }
}

/**
 * Implementation of hook_menu().
 */
function avbase_menu() {
  $items = array();
  $items['av/categories'] = array(
    'title' => 'Categories',
    'page callback' => 'avbase_categories_home',
    'access arguments' => array(AVBASE_PERM_SYSTEM_CATEGORIES),
    'menu_name' => 'av',
    'expanded' => TRUE,
    'file' => 'inc/categories.inc',
  );

  $categories = avbase_category_groups();
  $x = -1;
  foreach ($categories as $k => $v) {
    $x++;
    $category_title = isset($v['plural_name']) ? $v['plural_name'] : $v['name'];
    $items['av/categories/' . $k] = array(
      'title' => $category_title,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avbase_categories_form', $k),
      'access arguments' => array(AVBASE_PERM_SYSTEM_CATEGORIES),
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
      'weight' => $x,
    );
    $items['av/categories/' . $k . '/add'] = array(
      'title' => 'New',
      'page callback' => 'avbase_category_form_load',
      'page arguments' => array($k, NULL),
      'access arguments' => array(AVBASE_PERM_SYSTEM_CATEGORIES),
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
    );
    $items['av/categories/' . $k . '/%avcategory/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'avbase_category_form_load',
      'page arguments' => array($k, 3),
      'access arguments' => array(AVBASE_PERM_SYSTEM_CATEGORIES),
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
    );
    $items['av/categories/' . $k . '/%avcategory/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avbase_category_delete_confirm_form', $k, 3),
      'access arguments' => array(AVBASE_PERM_SYSTEM_CATEGORIES),
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
    );
  }

  $items['av/categories/%/autocomplete'] = array(
    'title' => 'Categories Autocomplete',
    'page callback' => 'avbase_category_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/categories.inc',
  );

  $items['av/settings'] = array(
    'title' => 'Settings',
    'description' => 'System settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_general_settings_form'),
    'access arguments' => array(AVBASE_PERM_SYSTEM_SETTINGS),
    'menu_name' => 'av',
  );


  $items['av/users'] = array(
    'title' => 'Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_users_home_form'),
    'access arguments' => array('administer users'),
    'menu_name' => 'av',
    'expanded' => TRUE,
    'file' => 'inc/users.inc',
  );
  $items['av/users/list'] = array(
    'title' => 'Users',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['av/users/new'] = array(
    'title' => 'New user',
    'page callback' => 'avbase_user_admin',
    'page arguments' => array('create'),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/users.inc',
  );
  $items['av/users/permissions'] = array(
    'title' => 'Role Permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_user_permissions_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/users.inc',
    'weight' => 2,
  );
  $items['av/users/roles'] = array(
    'title' => 'User Roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_user_admin_roles'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/users.inc',
    'weight' => 1,
  );
  $items['av/users/roles/edit/%user_role'] = array(
    'title' => 'Edit user role',
    'page arguments' => array('avbase_user_admin_role', 4),
    'access callback' => 'avbase_user_role_edit_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'inc/users.inc',
  );
  $items['av/users/roles/delete/%user_role'] = array(
    'title' => 'Delete user role',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_user_admin_role_delete_confirm', 4),
    'access callback' => 'avbase_user_role_edit_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'inc/users.inc',
  );
  //$items['av/users/add'] = array(
  //  'title' => 'New user',
  //  'page callback' => 'avbase_user_form_load',
  //  'page arguments' => array(NULL),
  //  'access arguments' => array('administer users'),
  //  'type' => MENU_LOCAL_TASK,
  //  'file' => 'inc/users.inc',
  //);
  //$items['av/users/%user/edit'] = array(
  //  'title' => 'Edit',
  //  'page callback' => 'avbase_user_form_load',
  //  'page arguments' => array(2),
  //  'access callback' => 'user_is_logged_in',
  //  'type' => MENU_LOCAL_TASK,
  //  'file' => 'inc/users.inc',
  //);
  //$items['av/users/%user/view'] = array(
  //  'title' => 'My account',
  //  'title callback' => 'user_page_title',
  //  'title arguments' => array(2),
  //  'page callback' => 'user_view_page',
  //  'page arguments' => array(2),
  //  'access callback' => 'user_view_access',
  //  'access arguments' => array(2),
  //  'type' => MENU_LOCAL_TASK,
  //  'file' => 'inc/users.inc',
  //);
//  $items['av/users/permissions'] = array(
//      'title' => 'User permissions',
//      'page callback' => 'drupal_get_form',
//      'page arguments' => array('user_admin_permissions'),
//      'access callback' => 'user_is_logged_in',
//      'file' => 'user.admin.inc',
//      'type' => MENU_CALLBACK,
//  );

  $items['av/ajax_load/%/%'] = array(
    'page callback' => 'avbase_ajax_load',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
    'file' => 'inc/helpers.inc',
  );

  $items['av/help'] = array(
    'title' => 'Help',
    'page callback' => 'avbase_help_home',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/help/help.inc',
  );

  $items['av/updated-qty'] = array(
    'title' => 'Updated quantities',
    'page callback' => 'avbase_updated_quantities',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function avbase_menu_alter(&$items) {
  // Example - disable the page at node/add
  $items[BACKUP_MIGRATE_MENU_PATH . '/export/advanced']['access callback'] = 'avbase_user_is_super_admin';
  $items[BACKUP_MIGRATE_MENU_PATH . '/settings']['access callback'] = 'avbase_user_is_super_admin';
  $items[BACKUP_MIGRATE_MENU_PATH . '/nodesquirrel']['access callback'] = 'avbase_user_is_super_admin';
}

/**
 * Implementation of hook_permission().
 */
function avbase_permission() {
  $permissions = array(
    AVBASE_PERM_SYSTEM_SETTINGS => array(
      'title' => 'Modify system settings',
    ),
    AVBASE_PERM_SYSTEM_CATEGORIES => array(
      'title' => 'Modify system categories',
    ),
  );
  return $permissions;
}

/**
 * Implementation of hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function avbase_form_alter(&$form, $form_state, $form_id) {
  if (!user_access('administer modules')) {
    if ($form_id == 'user_filter_form') {
      $form['#access'] = FALSE;
    }

    if ($form_id == 'user_admin_account') {
      drupal_set_title('Users');
      $form['options']['#access'] = FALSE;
    }
  }

  switch ($form_id) {
    //case 'avbase_categories_form':
    //  avbase_categories_form_alter($form, $form_state);
    //  break;
    case 'avbase_general_settings_form':
      $form['actions']['#theme'] = 'avbase_crud_button_group';
      break;

    case 'backup_migrate_ui_manual_quick_backup_form':
      //$form['quickbackup']['profile_id']['#attributes']['class']
      if (!avbase_user_is_super_admin()) {
        unset($form['quickbackup']['destination']['#after_build']);
        unset($form['quickbackup']['destination']['destination_id']['#options']['Offsite']);
        //$form['quickbackup']['destination']['copy']['#access'] = FALSE;
        //$form['quickbackup']['destination']['copy_destination']['#access'] = FALSE;
        unset($form['quickbackup']['destination']['copy_destination']['copy_destination_id']['#options']['Offsite']);
        $form['advanced']['#access'] = FALSE;
        //unset($form['quickbackup']['profile_id']['#options']['uct_clean_install']);
        unset($form['quickbackup']['profile_id']['#options']['default']);
      }
      break;

    case 'backup_migrate_ui_manual_restore_form':
      $form['advanced']['utils_site_offline']['#default_value'] = 1;
      $form['advanced']['utils_site_offline_message_wrapper']['utils_site_offline_message']['#default_value'] = 'System restore is on-going. We should be back shortly. Thank you for your patience.';
      if (!avbase_user_is_super_admin()) {
        $form['advanced']['#access'] = FALSE;
      }
      break;

    case 'backup_migrate_crud_edit_form':
      if (!avbase_user_is_super_admin()) {
        //$form['profile_id']['#access'] = FALSE;
        $form['cron_settings']['cron_builtin']['#title'] = 'Run using Cron';
        unset($form['cron_settings']['cron_builtin']['#description']);
        $form['cron_settings']['cron_elysia']['#access'] = FALSE;
        unset($form['cron_settings']['cron_none']['#description']);
      }
      break;

    case 'user_login':
      $site_name_html = <<<HTML
<h1 class="uk-article-title uk-text-center">
  UCMC<i class="uk-icon-truck uk-margin-left"></i>
</h1>
<!--<div class="uk-grid uk-grid-width-1-2 uk-margin-bottom">-->
  <!--<div>-->
    <!--<h1 class="uk-article-title uk-text-left">-->
      <!--UCMC-->
    <!--</h1>-->
  <!--</div>-->
  <!--<div>-->
    <!--<h1 class="uk-article-title uk-text-right">-->
      <!--<i class="uk-icon-truck"></i>-->
    <!--</h1>-->
  <!--</div>-->
<!--</div>-->
<!--<hr class="uk-article-divider" />-->
HTML;

      $form['actions']['submit']['#attributes']['class'][] = 'uk-button-success uk-float-right';
      $form['site_name'] = array(
        '#markup' => $site_name_html,
        '#weight' => 0,
      );
      break;
  }

}

/**
 * Alter user_cancel_confirm_form.
 * @param $form
 * @param $form_state
 */
function avbase_form_user_cancel_confirm_form_alter(&$form, $form_state) {
  global $user;
  // No need to alter form for super admin.
  if ($user->uid == 1) {
    return;
  }

  $account = $form['_account']['#value'];
  if ($account->uid == 1 || isset($account->roles[8])) {
    drupal_access_denied();
    drupal_exit();
  }

  $form['user_cancel_method']['#access'] = FALSE;
  $form['user_cancel_confirm']['#access'] = FALSE;
  $form['user_cancel_notify']['#access'] = FALSE;
  $form['description']['#markup'] = t('This action cannot be undone.');
  $form['actions']['submit']['#value'] = t('Delete user');
}

/**
 * Alter user_register_form.
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function avbase_form_user_register_form_alter(&$form, $form_state, $form_id) {
  global $user;
  // No need to alter form for super admin.
  if ($user->uid == 1) {
    return;
  }

  drupal_set_title('New user');
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb = array($breadcrumb[0]);
  $breadcrumb[] = l('Users', 'av/users');
  drupal_set_breadcrumb($breadcrumb);

  avbase_form_user_profile_form_alter($form, $form_state, $form_id);
}

/**
 * Alter user_profile_form.
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function avbase_form_user_profile_form_alter(&$form, $form_state, $form_id) {
  global $user;
  // No need to alter form for super admin.
  if ($user->uid == 1) {
    return;
  }

  if ($form_id == 'user_profile_form') {    //drupal_set_title('New user');
    //$breadcrumb = drupal_get_breadcrumb();
    //$breadcrumb = array($breadcrumb[0]);
    //$breadcrumb[] = l('Users', 'av/users');
    //drupal_set_breadcrumb($breadcrumb);
  }

  // Prevent modification of super admin.
  $account = empty($form['#user']) ? NULL : $form['#user'];
  if ($account->uid == 1 || isset($account->roles[8])) {
    drupal_access_denied();
    drupal_exit();
  }

  // After build.
  $form['#after_build'][] = 'avbase_form_user_profile_form_after_build';

  // User inc file.
  module_load_include('inc', 'avbase', 'inc/users');

  if ($user->uid != $account->uid) {
    $form['account']['roles']['#access'] = TRUE;
    unset($form['account']['roles']['#options'][8]); // Remove Super Admin option.
    unset($form['account']['roles'][2]); // Remove authenticated user option.
  }
  $form['account']['mail']['#description'] = '';
  $form['account']['pass']['#access'] = user_access('administer users');

  // Set crud settings.
  $avuser_row = avbase_avuser_load($account);
  $form['id'] = array('#type' => 'value', '#value' => isset($avuser_row->id) ? $avuser_row->id : NULL);
  avbase_user_form_settings($form);

  $form['avuser']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => 'First name',
    '#default_value' => isset($avuser_row->first_name) ? check_plain($avuser_row->first_name) : '',
    '#maxlength' => 32,
  );
  $form['avuser']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Last name',
    '#default_value' => isset($avuser_row->last_name) ? check_plain($avuser_row->last_name) : '',
    '#maxlength' => 32,
  );
  $form['avuser']['contact_number'] = array(
    '#type' => 'textfield',
    '#title' => 'Contact number',
    '#default_value' => isset($avuser_row->contact_number) ? check_plain($avuser_row->contact_number) : '',
    '#maxlength' => 255,
  );
  $form['avuser']['address'] = array(
    '#type' => 'textarea',
    '#title' => 'Address',
    '#default_value' => isset($avuser_row->address) ? check_plain($avuser_row->address) : '',
    '#maxlength' => 255,
  );
  //$form['#theme'] = 'avbase_user_form';
  $form['actions']['#theme'] = 'avbase_crud_button_group';
}

/**
 * Return list of system category groups.
 * @param string $category_id
 *
 * @return array
 */
function avbase_category_groups($category_id = '') {
  $groups = &drupal_static(__FUNCTION__, array());
  if (empty($groups)) {
    //$groups['customer_cat'] = array(
    //  'name' => 'Customer Category',
    //  'plural_name' => 'Customer Categories',
    //);
    //$groups['vendor_cat'] = array(
    //  'name' => 'Vendor Category',
    //  'plural_name' => 'Vendor Categories',
    //);
    $groups['category1'] = array(
      'name' => 'Customer Category',
      'plural_name' => 'Customer Categories',
    );
    $groups['category2'] = array(
      'name' => 'Vendor Category',
      'plural_name' => 'Vendor Categories',
    );
    $groups['product_cat'] = array(
      'name' => 'Product Category',
      'plural_name' => 'Product Categories',
    );
    $groups['uom'] = array(
      'name' => 'Unit of Measure',
    );
    //$groups['account_type'] = array(
    //  'name' => 'Account type',
    //  'plural_name' => 'Account types',
    //);
    $groups['shelf'] = array(
      'name' => 'Shelf',
      'plural_name' => 'Shelves',
    );
    $groups['principal'] = array(
      'name' => 'Principal',
      'plural_name' => 'Principal',
    );
    $groups['payment_method'] = array(
      'name' => 'Payment Method',
      'plural_name' => 'Payment Methods',
    );
    $groups['payment_term'] = array(
      'name' => 'Payment Term',
      'plural_name' => 'Payment Terms',
    );
    //$groups['agent_vend'] = array(
    //  'name' => 'Vendor Agent',
    //  'plural_name' => 'Vendor Agents',
    //);
    //$groups['agent_cust'] = array(
    //  'name' => 'Customer Agent',
    //  'plural_name' => 'Customer Agents',
    //);
    $groups['agent1'] = array(
      'name' => 'Customer Agent',
      'plural_name' => 'Customer Agents',
    );
    $groups['agent2'] = array(
      'name' => 'Vendor Agent',
      'plural_name' => 'Vendor Agents',
    );


    $groups['area'] = array(
      'name' => 'Area',
      'plural_name' => 'Areas',
    );
  }

  if (isset($groups[$category_id])) {
    return $groups[$category_id];
  }
  return $groups;
}

/**
 * General system settings form.
 * @return mixed
 */
function avbase_general_settings_form() {
  global $user;
  $form['company_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site Information'),
    '#collapsible' => TRUE,
    //'#collapsed' => TRUE,
  );
  $form['company_information']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Company name'),
    '#default_value' => variable_get('site_name', 'UCT'),
    '#required' => TRUE,
    '#access' => $user->uid == 1,
  );
  $form['company_information']['av_company_old_name'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use "Ultimate Care Trading" as company name'),
    '#description' => 'If unchecked, "Ultimate Care MegaVentures Corporation" will be used.',
    '#default_value' => variable_get('av_company_old_name', 0),
  );
  $form['company_information']['av_checks_payable_to'] = array(
    '#type' => 'textfield',
    '#title' => t('All checks payable to'),
    '#default_value' => variable_get('av_checks_payable_to', 'Ultimate Care Trading'),
    '#required' => TRUE,
    '#description' => 'Input "hide" to hide this from print.',
  );

  //$form['company_information']['site_mail'] = array(
  //  '#type' => 'textfield',
  //  '#title' => t('E-mail address'),
  //  '#default_value' => variable_get('site_mail', ini_get('sendmail_from')),
  //  '#required' => TRUE,
  //  '#element_validate' => array('avbase_element_validate_email'),
  //  '#access' => user_access('administer site configuration'),
  //);
  $form['company_information']['av_company_address'] = array(
    '#type' => 'textarea',
    '#maxlength' => 255,
    '#title' => 'Address',
    '#default_value' => variable_get('av_company_address', ''),
  );
  $form['company_information']['av_company_contact_number'] = array(
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#title' => 'Contact Number(s)',
    '#default_value' => variable_get('av_company_contact_number', ''),
  );
  //$form['company_information']['av_company_capital'] = array(
  //  '#type' => 'textfield',
  //  '#maxlength' => 255,
  //  '#title' => 'Capital',
  //  '#default_value' => variable_get('av_company_capital', ''),
  //  '#element_validate' => array('element_validate_number'),
  //);

  // $form['company_information']['av_datepicker_ref_year'] = array(
  //   '#type' => 'textfield',
  //   '#title' => 'Date picker reference year',
  //   '#description' => 'This will be used by date picker\'s as reference for min and max date.',
  //   '#default_value' => variable_get('av_datepicker_ref_year', 0),
  //   '#element_validate' => array('element_validate_integer_positive'),
  //   '#special_element_type' => 'number',
  //   '#required' => TRUE,
  // );


  // System settings.
  $form['system_settings'] = array(
    '#id' => 'system-settings',
    '#type' => 'fieldset',
    '#title' => t('System settings'),
    '#collapsible' => TRUE,
    //'#collapsed' => TRUE,
  );

  $transaction_lock_date = variable_get('avtxns_as_of_date_lock', NULL);
  $form['system_settings']['avtxns_as_of_date_lock'] = array(
    '#title' => t('Lock transactions on or before'),
    '#type' => 'textfield',
    '#icon_key' => 'calendar',
    '#required' => TRUE,
    '#default_value' => empty($transaction_lock_date) ? NULL : format_date($transaction_lock_date, 'custom', AVBASE_MONTH_ONLY_FORMAT),
    '#access' => !empty($transaction_lock_date),
    '#attributes' => array(
      'data-uk-datepicker' => "{format:'" . AVBASE_MONTH_ONLY_FORMAT_JS . "',
          minDate: '" . format_date(AVBASE_DATE_MIN_TIMESTAMP, 'custom', AVBASE_MONTH_ONLY_FORMAT) . "',
          maxDate: '" . format_date(AVBASE_DATE_MAX_TIMESTAMP, 'custom', AVBASE_MONTH_ONLY_FORMAT) . "',
        }",
      'class' => array('trigger-ajax-search uk-width-1-6'),
      'placeholder' => AVBASE_MONTH_ONLY_FORMAT_JS,
      'autocomplete' => 'off',
    ),
    '#av_date_inputmask' => TRUE,
    '#av_date_format' => AVBASE_MONTH_ONLY_FORMAT,
    '#av_date_inputmask_format' => AVBASE_MONTH_ONLY_FORMAT_MASK,
    '#element_validate' => array('avbase_element_validate_date'),
  );

  $export_limit_min = 100;
  $export_limit_max = 5000;
  $form['system_settings']['av_export_row_limit'] = array(
    '#type' => 'textfield',
    '#maxlength' => 4,
    '#title' => 'Export batch limit',
    '#description' => t('Number of rows per batch when exporting reports to csv. Set to a lower value for improved cpu performance (when server cpu is weak). Min: @min, Max: @max', array('@min' => $export_limit_min, '@max' => $export_limit_max)),
    '#required' => TRUE,
    '#default_value' => (int) variable_get('av_export_row_limit', '5000'),
    '#element_validate' => array('element_validate_integer_positive'),
    '#special_element_type' => 'number',
    '#attributes' => array(
      'min' => $export_limit_min,
      'max' => $export_limit_max,
    ),
  );

  $form['system_settings']['av_discount_multiplier'] = array(
    '#type' => 'textfield',
    '#maxlength' => 4,
    '#title' => 'Discount Multiplier',
    '#description' => 'Discounts received from Vendors will use this value to set the Discount limit when selling products.',
    '#required' => TRUE,
    '#default_value' => (float) variable_get('av_discount_multiplier', '0.4'),
    '#element_validate' => array('element_validate_number'),
    '#special_element_type' => 'number',
    '#attributes' => array(
      'step' => 0.01,
      'min' => 0.1,
      'max' => 1,
    ),
  );

  $date_format = 'F d';
  $form['system_settings']['av_fiscal_date'] = array(
    '#type' => 'textfield',
    '#title' => 'Fiscal Date',
    '#default_value' => format_date(variable_get('av_fiscal_date', strtotime('January 01')), 'custom', $date_format),
    '#element_validate' => array('avbase_element_validate_date'),
    '#av_date_format' => $date_format,
    '#icon_key' => 'calendar',
    '#attributes' => array(
      'data-uk-datepicker' => "{format:'MMMM DD'}",
      'class' => array('uk-width-1-6'),
    ),
    '#required' => TRUE,
  );

  // File system.
  $form['file_system'] = array(
    '#type' => 'fieldset',
    '#title' => t('File system'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['file_system']['file_private_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Private file system path'),
    '#default_value' => variable_get('file_private_path', ''),
    '#maxlength' => 255,
    '#description' => t('An existing local file system path for storing private files.'),
    '#after_build' => array('system_check_directory'),
  );

  $form['file_system']['file_temporary_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Temporary directory'),
    '#default_value' => variable_get('file_temporary_path', file_directory_temp()),
    '#maxlength' => 255,
    '#description' => t('A local file system path where temporary files will be stored.'),
    '#after_build' => array('system_check_directory'),
  );

  // Opcache.
  if ($user->uid == 1) {
    if (isset($_GET['opcache_reset']) && function_exists('opcache_reset')) {
      opcache_reset();
    }

    $opcache_status = function_exists('opcache_get_status') ? opcache_get_status() : array();
    if (!empty($opcache_status)) {
      $opcache_items = array();
      foreach ($opcache_status as $os_k => $os_v) {
        if ($os_k == 'scripts') {
          continue;
        }
        if (is_bool($os_v)) {
          $opcache_items[$os_k] = array('data' => $os_k . ': ' . ($os_v ? 'Yes' : 'No'));
        } elseif (in_array($os_k, array('memory_usage', 'opcache_statistics'))) {
          $opcache_items[$os_k] = array('data' => $os_k);
          foreach ($os_v as $o_k => $o) {
            $opcache_items[$os_k]['children'][$o_k] = array('data' => $o_k . ': ' . $o);
          }
        }
      }
      $form['opcache'] = array(
        '#type' => 'fieldset',
        '#title' => t('Cache'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['opcache']['status'] = array(
        '#title' => t('Status'),
        '#markup' => theme('item_list', array('items' => $opcache_items)),
      );

      $form['opcache']['reset'] = array(
        '#markup' => '<a href="?opcache_reset=1">reset</a>',
      );
    }
  }


  $form['database_update_link'] = array(
    '#markup' => l('Flush cache / Check for DB updates', 'update.php'),
  );
  //$form['flush_drupal_cache'] = array(
  //  '#markup' => '<br />' . l('Flush all caches', 'admin_menu/flush-cache', array('query' => drupal_get_destination() + array('token' => drupal_get_token('admin_menu/flush-cache')))),
  //  '#access' => user_access('flush caches'),
  //);

  //theme_item_list()
  if (!avbase_user_is_super_admin()) {
    $form['#submit'][] = 'avbase_general_settings_form_submit';
  }
  return system_settings_form($form);
}

function avbase_general_settings_form_validate($form, &$form_state) {
  // Adjust lock date to make sure it uses selected month's last day.
  if (!empty($form_state['values']['avtxns_as_of_date_lock'])) {
    $form_state['values']['avtxns_as_of_date_lock'] = strtotime('last day of this month', $form_state['values']['avtxns_as_of_date_lock']);
  }
}

function avbase_general_settings_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['av_company_old_name'])) {
    $form_state['values']['site_name'] = 'Ultimate Care Trading';
  }
  else {
    $form_state['values']['site_name'] = 'Ultimate Care MegaVentures Corporation';
  }
}
/**
 * Implements hook_library().
 */
function avbase_library() {
  $libraries['avbase.autocompleteActions'] = array(
    'title' => 'Supplementary Autocomplete actions for AV module',
    'version' => VERSION,
    'js' => array(
      AVBASE_MODULE_PATH . '/js/autocomplete.js' => array('group' => JS_DEFAULT, 'weight' => -1),
    ),
  );

  $terms = avbase_get_categories('payment_term');
  $terms_js_settings = array('avbase' => array('paymentTerms' => $terms));
  $libraries['avbase.paymentTerms'] = array(
    'title' => 'Payment terms and discounts',
    'version' => VERSION,
    'js' => array(
      AVBASE_MODULE_PATH . '/js/payment_terms.js' => array('group' => JS_DEFAULT),
      array(
        'data' => $terms_js_settings,
        'type' => 'setting',
      ),
    ),
  );

  $libraries['avbase.dateInputMask'] = array(
    'title' => 'Date input mask',
    'version' => VERSION,
    'js' => array(
      AVBASE_MODULE_PATH . '/js/inputmask/dist/min/jquery.inputmask.bundle.min.js' => array('group' => JS_DEFAULT),
      // AVBASE_MODULE_PATH . '/js/inputmask/dist/inputmask/dependencyLibs/inputmask.dependencyLib.js' => array('group' => JS_DEFAULT),
      // AVBASE_MODULE_PATH . '/js/inputmask/dist/min/inputmask/inputmask.min.js' => array('group' => JS_DEFAULT),
      // AVBASE_MODULE_PATH . '/js/inputmask/dist/min/inputmask/inputmask.date.extensions.min.js' => array('group' => JS_DEFAULT),
      AVBASE_MODULE_PATH . '/js/avbase.inputmask.js' => array('group' => JS_DEFAULT),
    ),
  );

  return $libraries;
}

///**
// * Implementation of hook_js_alter().
// * @param $js
// */
//function avbase_js_alter(&$js) {
//  unset($js['misc/tableheader.js']);
//}

/**
 * @param $form
 * @param $form_state
 * @param $entity_type
 */
function avbase_entity_overview_form($form, &$form_state, $entity_type = NULL) {
  module_load_include('inc', 'avbase', 'inc/entity_overview.form');
  $form['#attributes']['id'] = 'entity-search-form';
  $form['#attributes']['autocomplete'] = 'off';
  $form['#attached']['js'][] = AVBASE_MODULE_PATH . '/js/entity_overview.form.js';

  // Add Search form.
  $form['search'] = avbase_entity_overview_search_form($form_state, $entity_type);
  //$form['buttons'] = avbase_entity_overview_buttons_form($form_state, $entity_name);
  $form['entity_info'] = avbase_entity_overview_info_form($form_state, $entity_type);
  return $form;
}

/**
 * Implementation of hook_user_view().
 * @param $account
 * @param $view_mode
 * @param $langcode
 */
function avbase_user_view($account, $view_mode, $langcode) {
  avbase_user_extra_details($account);
  $avuser_row = empty($account->avdata) ? NULL : $account->avdata;
  drupal_set_title($avuser_row->full_name);

  //$account->content['avuser']['first_name'] = array(
  //  '#type' => 'user_profile_item',
  //  '#title' => t('First name'),
  //  '#markup' => empty($avuser_row->first_name) ? '' : $avuser_row->first_name,
  //);
  //$account->content['avuser']['last_name'] = array(
  //  '#type' => 'user_profile_item',
  //  '#title' => t('Address'),
  //  '#markup' => empty($avuser_row->last_name) ? '' : $avuser_row->last_name,
  //);
  $account->content['avuser']['contact_number'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Contact number'),
    '#markup' => empty($avuser_row->contact_number) ? '' : $avuser_row->contact_number,
  );
  $account->content['avuser']['address'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Address'),
    '#markup' => empty($avuser_row->address) ? '' : $avuser_row->address,
  );
}

function avbase_user_is_super_admin() {
  global $user;
  return $user->uid == 1;
}

/**
 * Implementation of hook_user_delete().
 * @param $account
 */
function avbase_user_delete($account) {
  db_query("DELETE FROM {avtbl_users} WHERE uid = :uid", array(':uid' => $account->uid));
}

/**
 * Menu access callback for user role editing.
 */
function avbase_user_role_edit_access($role) {
  // Prevent the system-defined roles from being altered or removed.
  if (in_array($role->rid, avbase_restricted_rids()))
  if ($role->rid == DRUPAL_ANONYMOUS_RID || $role->rid == DRUPAL_AUTHENTICATED_RID) {
    return FALSE;
  }

  return user_access('administer users');
}

function avbase_restricted_rids() {
  return array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID, 8, 3);
}

/**
 * Implementation of hook_preprocess_html.
 * @param $vars
 */
function avbase_preprocess_html(&$vars) {
  $custom_window_title = avbase_set_window_title();
  if (!empty($custom_window_title)) {
    $vars['head_title'] = $custom_window_title;
  }
}

//function avbase_cron() {
//  $interval = variable_get('avbase_cron_interval', 60 * 60);
//  if (time() >= variable_get('avbase_cron_next_execution', 0)) {
//    // Do stuff.
//    dpm('did stuff');
//    variable_set('avbase_cron_next_execution', time() + $interval);
//  }
//}

/**
 * Show list of products which quantities doesn't match that when all transactions where scanned.
 * @return string
 */
function avbase_updated_quantities() {
  $output = '';
  $date_updated = variable_get('avbase_qty_integrity_date', 0);
  $qty_integrity = variable_get('avbase_qty_integrity', '');
  $qty_integrity = empty($qty_integrity) ? array() : unserialize($qty_integrity);

  if (empty($qty_integrity) || empty($date_updated)) {
    $output .= '<div class="uk-text-muted">No product quantities were changed during the update</div>';
    return $output;
  }

  $output .= '<div class="uk-text-large uk-text-center uk-text-uppercase">List of products with incorrect on-hand qty after reading every transaction</div>';
  $output .= '<div class="uk-text-center"><em>As of ' . format_date($date_updated, 'custom', 'F d, Y - H:i a') . '</em></div>';


  $query = "SELECT id, title FROM {avtbl_products} WHERE id IN (:ids)";
  $rs = db_query($query, array(':ids' => array_keys($qty_integrity)));
  $rows = array();
  foreach ($rs as $row) {
    $data = array();
    $old_qty = $qty_integrity[$row->id]['old'];
    $new_qty = $qty_integrity[$row->id]['new'];
    $data[] = avreports_product_history_link($row->title);
    $data[] = '<div class="uk-text-right">' . number_format($old_qty) . '</div>';
    $data[] = '<div class="uk-text-right">' . number_format($new_qty) . '</div>';
    $data['#avclass'] = $old_qty < $new_qty ? '' : 'uk-alert-danger';
    $rows[] = $data;
  }

  $header = array(
    'PRODUCT',
    array('data' => 'INCORRECT QTY', 'class' => array('uk-text-right')),
    array('data' => 'UPDATED QTY', 'class' => array('uk-text-right')),
  );
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'updated-qty-list', 'class' => array('uk-table-hover uk-table-condensed uk-text-small')),
  ));

  return $output;
}
