<?php
/**
 * @file
 * UCT base features and functions.
 */

module_load_include('inc', 'avbase', 'inc/helpers');
module_load_include('inc', 'avbase', 'inc/crud');

define('AVBASE_MODULE_PATH', drupal_get_path('module', 'avbase'));
define('AVBASE_LIBRARIES_PATH', 'sites/all/libraries');

define('AVBASE_DISCOUNT_PERCENT', 1);
define('AVBASE_DISCOUNT_FIXED', 2);

define('AVBASE_DECIMAL_MAX', 6);
define('AVBASE_DIGITS_MAX', 12);

define('AVBASE_DECIMAL_FORMAT_MAX', 4);

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avbase_theme($existing, $type, $theme, $path) {
  $themes = array();

  $template_path = $path . '/templates';
  $theme_names = array(
    //'avcustomers_customer_form',
    //'avcustomers_home_form',
    'avbase_user_form',
    'avbase_nestable_form',
    'avbase_nestable_form_row',
    'avbase_crud_button_group',
    'avbase_modal_form',
    'avbase_form_table',
    'avbase_entity_overview_form',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  // OTHERS.
  $theme_names = array(
    'avbase_modal',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }
  return $themes;
}

/**
 * Implements hook_modules_installed().
 *
 * @see avbase_install()
 */
function avbase_modules_installed($modules) {
  if (in_array('menu', $modules)) {
    $menu = array(
      'menu_name' => 'av',
      'title' => t('AV Menu'),
      'description' => t('AV AIS links'),
    );
    menu_save($menu);
  }
}


/**
 * Implementation of hook_init().
 */
function avbase_init() {
  drupal_add_js(AVBASE_MODULE_PATH . '/js/avbase.js');
}

/**
 * Implementation of hook_menu().
 */
function avbase_menu() {
  $items = array();
  $items['av/categories'] = array(
    'title' => 'Categories',
    'page callback' => 'avbase_categories_home',
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    'expanded' => TRUE,
    'file' => 'inc/categories.inc',
  );

  $categories = avbase_category_groups();
  $x = -1;
  foreach ($categories as $k => $v) {
    $x++;
    $category_title = isset($v['plural_name']) ? $v['plural_name'] : $v['name'];
    $items['av/categories/' . $k] = array(
      'title' => $category_title,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avbase_categories_form', $k),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
      'weight' => $x,
    );
    $items['av/categories/' . $k . '/add'] = array(
      'title' => 'New',
      'page callback' => 'avbase_category_form_load',
      'page arguments' => array($k, NULL),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
    );
    $items['av/categories/' . $k . '/%avcategory/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'avbase_category_form_load',
      'page arguments' => array($k, 3),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
    );
    $items['av/categories/' . $k . '/%avcategory/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avbase_category_delete_confirm_form', $k, 3),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'file' => 'inc/categories.inc',
    );
  }

  $items['av/categories/%/autocomplete'] = array(
    'title' => 'Categories Autocomplete',
    'page callback' => 'avbase_category_autocomplete',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/categories.inc',
  );

  $items['av/settings'] = array(
    'title' => 'Settings',
    'description' => 'System settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_general_settings_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
  );

  $items['av/users'] = array(
    'title' => 'Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avbase_users_home_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    'expanded' => TRUE,
    'file' => 'inc/users.inc',
  );
  $items['av/users/add'] = array(
    'title' => 'New user',
    'page callback' => 'avbase_user_form_load',
    'page arguments' => array(NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/users.inc',
  );
  $items['av/users/%user/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'avbase_user_form_load',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/users.inc',
  );
  $items['av/users/%user/view'] = array(
    'title' => 'My account',
    'title callback' => 'user_page_title',
    'title arguments' => array(2),
    'page callback' => 'user_view_page',
    'page arguments' => array(2),
    'access callback' => 'user_view_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/users.inc',
  );

  $items['av/ajax_load/%/%'] = array(
    'page callback' => 'avbase_ajax_load',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_is_logged_in',
    'file' => 'inc/helpers.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function avbase_form_alter(&$form, $form_state, $form_id) {
  if (!user_access('administer modules')) {
    if ($form_id == 'user_filter_form') {
      $form['#access'] = FALSE;
    }

    if ($form_id == 'user_admin_account') {
      drupal_set_title('Users');
      $form['options']['#access'] = FALSE;
    }
  }

  switch ($form_id) {
    //case 'avbase_categories_form':
    //  avbase_categories_form_alter($form, $form_state);
    //  break;
    case 'avbase_general_settings_form':
      $form['actions']['#theme'] = 'avbase_crud_button_group';
      break;
  }
}

/**
 * Return list of system category groups.
 * @param string $category_id
 *
 * @return array
 */
function avbase_category_groups($category_id = '') {
  $groups = &drupal_static(__FUNCTION__, array());
  if (empty($groups)) {
    $groups['customer_cat'] = array(
      'name' => 'Customer Category',
      'plural_name' => 'Customer Categories',
    );
    $groups['vendor_cat'] = array(
      'name' => 'Vendor Category',
      'plural_name' => 'Vendor Categories',
    );
    $groups['product_cat'] = array(
      'name' => 'Product Category',
      'plural_name' => 'Product Categories',
    );
    $groups['uom'] = array(
      'name' => 'Unit of Measure',
    );
    $groups['account_type'] = array(
      'name' => 'Account type',
      'plural_name' => 'Account types',
    );
    $groups['shelf'] = array(
      'name' => 'Shelf',
      'plural_name' => 'Shelves',
    );
    $groups['principal'] = array(
      'name' => 'Principal',
      'plural_name' => 'Principal',
    );
    $groups['payment_method'] = array(
      'name' => 'Payment Method',
      'plural_name' => 'Payment Methods',
    );
    $groups['payment_term'] = array(
      'name' => 'Payment Term',
      'plural_name' => 'Payment Terms',
    );
    $groups['agent_vend'] = array(
      'name' => 'Vendor Agent',
      'plural_name' => 'Vendor Agents',
    );
    $groups['agent_cust'] = array(
      'name' => 'Customer Agent',
      'plural_name' => 'Customer Agents',
    );
    $groups['category1'] = array(
      'name' => 'Client - Customer Category',
      'plural_name' => 'Client - Customer Categories',
    );
    $groups['category2'] = array(
      'name' => 'Client - Vendor Category',
      'plural_name' => 'Client - Vendor Categories',
    );
    $groups['agent1'] = array(
      'name' => 'Client - Customer Agent',
      'plural_name' => 'Client - Customer Agents',
    );
    $groups['agent2'] = array(
      'name' => 'Client - Vendor Agent',
      'plural_name' => 'Client - Vendor Agents',
    );
    $groups['area'] = array(
      'name' => 'Area',
      'plural_name' => 'Areas',
    );
  }

  if (isset($groups[$category_id])) {
    return $groups[$category_id];
  }
  return $groups;
}

/**
 * General system settings form.
 * @return mixed
 */
function avbase_general_settings_form() {
  $form['company_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site details'),
  );
  $form['company_information']['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Company name'),
    '#default_value' => variable_get('site_name', 'Drupal'),
    '#required' => TRUE
  );
  $form['company_information']['site_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#default_value' => variable_get('site_mail', ini_get('sendmail_from')),
    '#required' => TRUE,
    '#element_validate' => array('avbase_element_validate_email'),
    '#access' => user_access('administer site configuration'),
  );
  $form['company_information']['av_company_address'] = array(
    '#type' => 'textarea',
    '#maxlength' => 255,
    '#title' => 'Address',
    '#default_value' => variable_get('av_company_address', ''),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_library().
 */
function avbase_library() {
  $libraries['avbase.autocompleteActions'] = array(
    'title' => 'Supplementary Autocomplete actions for AV module',
    'version' => VERSION,
    'js' => array(
      AVBASE_MODULE_PATH . '/js/autocomplete.js' => array('group' => JS_DEFAULT, 'weight' => -1),
    ),
  );

  $terms = avbase_get_categories('payment_term');
  $terms_js_settings = array('avbase' => array('paymentTerms' => $terms));
  $libraries['avbase.paymentTerms'] = array(
    'title' => 'Payment terms and discounts',
    'version' => VERSION,
    'js' => array(
      AVBASE_MODULE_PATH . '/js/payment_terms.js' => array('group' => JS_DEFAULT),
      array(
        'data' => $terms_js_settings,
        'type' => 'setting',
      ),
    ),
  );

  return $libraries;
}

///**
// * Implementation of hook_js_alter().
// * @param $js
// */
//function avbase_js_alter(&$js) {
//  unset($js['misc/tableheader.js']);
//}

/**
 * @param $form
 * @param $form_state
 * @param string $entity_name
 * @param $entity_type
 */
function avbase_entity_overview_form($form, &$form_state, $entity_name, $entity_type = NULL) {
  module_load_include('inc', 'avbase', 'inc/entity_overview.form');
  $form['#attributes']['id'] = 'entity-search-form';
  $form['#attributes']['autocomplete'] = 'off';
  $form['#attached']['js'][] = AVBASE_MODULE_PATH . '/js/entity_overview.form.js';

  // Add Search form.
  $form['search'] = avbase_entity_overview_search_form($form_state, $entity_name, $entity_type);
  //$form['buttons'] = avbase_entity_overview_buttons_form($form_state, $entity_name);
  $form['entity_info'] = avbase_entity_overview_info_form($form_state, $entity_name, $entity_type);
  return $form;
}
