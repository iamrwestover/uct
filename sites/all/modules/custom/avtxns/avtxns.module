<?php

module_load_include('inc', 'avtxns', 'inc/helpers');

define('AVTXNS_MODULE_PATH', drupal_get_path('module', 'avtxns'));
define('AVTXNS_TXN_ROW_LIMIT', 250);
define('AVTXNS_TXN_ADD_NEW_ROW_COUNT', 30);

define('AVTXNS_RETURN_TYPE_RUD', 1);
define('AVTXNS_RETURN_TYPE_RS', 2);

define('AVTXNS_TXN_TYPE_PURCHASE_ORDER', 'po');
define('AVTXNS_TXN_TYPE_RECEIVE', 'rcv');
define('AVTXNS_TXN_TYPE_PURCHASE_RETURN', 'pr');
define('AVTXNS_TXN_TYPE_BILL', 'bill');
define('AVTXNS_TXN_TYPE_PAY_BILL', 'bpmt');
define('AVTXNS_TXN_TYPE_SALES_ORDER', 'so');
define('AVTXNS_TXN_TYPE_DELIVERY', 'dr');
define('AVTXNS_TXN_TYPE_SALES_RETURN', 'sr');
define('AVTXNS_TXN_TYPE_INVOICE', 'inv');
define('AVTXNS_TXN_TYPE_PAYMENT', 'pmt');
define('AVTXNS_TXN_TYPE_JOURNAL', 'jrn');
define('AVTXNS_TXN_TYPE_CREDIT_MEMO', 'crd');
define('AVTXNS_TXN_TYPE_VENDOR_CREDIT', 'vcrd');
define('AVTXNS_TXN_TYPE_CUSTOMER_CHARGES', 'chg');
define('AVTXNS_TXN_TYPE_OTHER_BILLS', 'obll');
define('AVTXNS_TXN_TYPE_ACCOUNTS_BILL', 'ainv');
define('AVTXNS_TXN_TYPE_STOCK_ADJUSTMENT', 'stk');
define('AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN', 'stin');
define('AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT', 'stou');

define('AVTXNS_TXN_STATUS_LOCKED', 0);
define('AVTXNS_TXN_STATUS_OPEN', 1);
define('AVTXNS_TXN_STATUS_PENDING', 2);
define('AVTXNS_TXN_STATUS_VOID', 3);
define('AVTXNS_TXN_STATUS_CLOSED', 4); // No more balance, or no more credits.

define('AVTXN_DISCOUNT_MULTIPLIER', variable_get('av_discount_multiplier', '0.4'));

// Account Chart Types
define('AVTXN_AC_TYPE_AR', 'ar');
define('AVTXN_AC_TYPE_AP', 'ap');
define('AVTXN_AC_TYPE_CURRENT', 'cur');
define('AVTXN_AC_TYPE_FIXED', 'fix');
define('AVTXN_AC_TYPE_COGS', 'cogs');
define('AVTXN_AC_TYPE_LIABILITY', 'liab');
define('AVTXN_AC_TYPE_INCOME', 'inc');
define('AVTXN_AC_TYPE_EXPENSE', 'exp');
define('AVTXN_AC_TYPE_CAPITAL', 'cap');
define('AVTXN_AC_TYPE_OTHER_INCOME', 'oinc');

// Specific Account Type IDS.
define('AVTXN_AC_SPECIFIC_AR_ID', 10);
define('AVTXN_AC_SPECIFIC_AP_ID', 11);
define('AVTXN_AC_SPECIFIC_SALES_ID', 6);
define('AVTXN_AC_SPECIFIC_SALES_DISCOUNT_ID', 13);
define('AVTXN_AC_SPECIFIC_SALES_RETURN_ID', 14);
define('AVTXN_AC_SPECIFIC_CASH_ID', 1);
define('AVTXN_AC_SPECIFIC_COGS_ID', 4);
define('AVTXN_AC_SPECIFIC_INVENTORY_ID', 2);

// Permissions.
$ttds = avtxns_txn_types();
foreach ($ttds as $ttd) {
  define('AVTXNS_PERM_CREATE_' . strtoupper($ttd['type']), 'avbase create transaction ' . $ttd['type']);
  if (empty($ttd['cant_edit'])) {
    define('AVTXNS_PERM_EDIT_' . strtoupper($ttd['type']), 'avbase edit transaction ' . $ttd['type']);
  }
  define('AVTXNS_PERM_VIEW_' . strtoupper($ttd['type']), 'avbase view transaction ' . $ttd['type']);
  if (empty($ttd['cant_change_status'])) {
    define('AVTXNS_PERM_VOID_' . strtoupper($ttd['type']), 'avbase void transaction ' . $ttd['type']);
  }
  if (!empty($ttd['product_discount_check'])) {
    define('AVTXNS_PERM_OPEN_' . strtoupper($ttd['type']), 'avbase open transaction ' . $ttd['type']);
  }
}
define('AVTXNS_PERM_MANAGE_COA', 'avbase manage coa');

/**
 * Implementation of hook_permission().
 */
function avtxns_permission() {
  $permissions = array();
  $ttds = avtxns_txn_types();
  foreach ($ttds as $td_k => $ttd) {
    $ttd_name = $ttd['name'];
    $ttd_type = strtoupper($ttd['type']);
    $permissions[constant('AVTXNS_PERM_CREATE_' . $ttd_type)] = array(
      'title' => t('@tdname - CREATE', array('@tdname' => $ttd_name)),
    );
    if (empty($ttd['cant_edit'])) {
      $permissions[constant('AVTXNS_PERM_EDIT_' . $ttd_type)] = array(
        'title' => t('@tdname - EDIT', array('@tdname' => $ttd_name)),
      );
    }
    $permissions[constant('AVTXNS_PERM_VIEW_' . $ttd_type)] = array(
      'title' => t('@tdname - VIEW', array('@tdname' => $ttd_name)),
    );
    if (empty($ttd['cant_change_status'])) {
      $permissions[constant('AVTXNS_PERM_VOID_' . $ttd_type)] = array(
        'title' => t('@tdname - VOID', array('@tdname' => $ttd_name)),
      );
    }
    if (!empty($ttd['product_discount_check'])) {
      $permissions[constant('AVTXNS_PERM_OPEN_' . $ttd_type)] = array(
        'title' => t('@tdname - APPROVE', array('@tdname' => $ttd_name)),
        'description' => t('Approve pending @tdname', array('@tdname' => $ttd['plural_name'])),
      );
    }
  }
  $permissions[AVTXNS_PERM_MANAGE_COA] = array(
    'title' => 'Chart of Account - MANAGE',
    'description' => t('Add, edit, disable accounts.'),
  );
  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function avtxns_menu() {
  $items['av/transactions'] = array(
    'title' => 'Transactions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_txns_home_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    'expanded' => TRUE,
  );
  $items['av/transaction-search/%'] = array(
    'title' => 'Quick Transaction Search',
    'page callback' => 'avtxns_quick_txn_search',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['av/chart-of-accounts'] = array(
    'title' => 'Chart of Accounts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_account_chart_home_form'),
    'access arguments' => array(AVTXNS_PERM_MANAGE_COA),
    'menu_name' => 'av',
    'expanded' => TRUE,
    'file' => 'inc/account_chart.form.inc',
  );
  $items['av/chart-of-accounts/new'] = array(
    'title' => 'New account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_account_chart_form', NULL),
    'access arguments' => array(AVTXNS_PERM_MANAGE_COA),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/account_chart.form.inc',
    'weight' => 10,
  );
  $items['av/chart-of-accounts/%avtxns_account_chart/view'] = array(
    'title' => 'View',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_account_chart_form', 2, TRUE),
    'access arguments' => array(AVTXNS_PERM_MANAGE_COA),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/account_chart.form.inc',
    'weight' => 0,
  );
  $items['av/chart-of-accounts/%avtxns_account_chart/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_account_chart_form', 2),
    'access arguments' => array(AVTXNS_PERM_MANAGE_COA),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/account_chart.form.inc',
    'weight' => 1,
  );
  $items["av/chart-of-accounts/%avtxns_account_chart/%/change-status"] = array(
    'title' => 'Status change',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_account_chart_change_status_confirm_form', 2, 3),
    'access arguments' => array(AVTXNS_PERM_MANAGE_COA),
    'type' => MENU_CALLBACK,
    'file' => 'inc/account_chart.form.inc',
  );


  $items['av/chart-of-accounts/autocomplete'] = array(
    'title' => 'Chart of Accounts Autocomplete',
    'page callback' => 'avtxns_account_chart_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/account_chart.helpers.inc',
  );

  $items['av/transactions/qty-check-and-reserve'] = array(
    'title' => 'QTY Check',
    'page callback' => 'avtxns_qty_check_and_reserve',
    'access callback' => 'user_is_logged_in',
    'file' => 'inc/helpers.inc',
    'type' => MENU_CALLBACK,
  );

  $transaction_types = avtxns_txn_types();
  foreach ($transaction_types as $k => $v) {
    $ttype = strtoupper($k);
    $items[$v['base_path']] = array(
      'title' => 'Transactions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avtxns_txns_home_form'),
      'access arguments' => array(constant('AVTXNS_PERM_VIEW_' . $ttype)),
    );
    $items["{$v['base_path']}/new"] = array(
      'title' => "New {$v['name']}",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avtxns_txn_form', $k, NULL),
      'access arguments' => array(constant('AVTXNS_PERM_CREATE_' . $ttype)),
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/txn.form.inc',
      'weight' => 10,
    );
    $items["{$v['base_path']}/%avtxns_txn/view"] = array(
      'title' => "View {$v['name']}",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avtxns_txn_form', $k, 2, TRUE),
      'access arguments' => array(constant('AVTXNS_PERM_VIEW_' . $ttype)),
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/txn.form.inc',
      'weight' => 0,
    );
    if (empty($v['cant_edit'])) {
      $items["{$v['base_path']}/%avtxns_txn/edit"] = array(
        'title' => "Edit",
        'page callback' => 'drupal_get_form',
        'page arguments' => array('avtxns_txn_form', $k, 2),
        'access arguments' => array(constant('AVTXNS_PERM_EDIT_' . $ttype)),
        'type' => MENU_LOCAL_TASK,
        'file' => 'inc/txn.form.inc',
        'weight' => 1,
      );
    }

    if (!empty($v['credit_txn_types'])) {
      $items["{$v['base_path']}/%avtxns_txn/apply-credits"] = array(
        'title' => "Credits",
        'page callback' => 'drupal_get_form',
        'page arguments' => array('avtxns_txn_credits_form', $k, 2),
        'access arguments' => array(constant('AVTXNS_PERM_EDIT_' . $ttype)),
        'type' => MENU_LOCAL_TASK,
        'file' => 'inc/credits.form.inc',
        'weight' => 2,
      );
    }
    if ($v['type'] == AVTXNS_TXN_TYPE_DELIVERY) {
      $items["{$v['base_path']}/%avtxns_txn/return"] = array(
        'title' => 'Return Products',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('avtxns_return_form', $k, 2),
        //'access callback' => array(constant('AVTXNS_PERM_CREATE_' . strtoupper(AVTXNS_TXN_TYPE_SALES_RETURN))),
        'access callback' => 'avtxns_return_form_access',
        'access arguments' => array($k, 2),
        'type' => MENU_LOCAL_TASK,
        'file' => 'inc/return.form.inc',
        'weight' => 3,
      );
    }
    $items["{$v['base_path']}/%avtxns_txn/related"] = array(
      'title' => "Related",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avtxns_related_form', $k, 2),
      'access arguments' => array(constant('AVTXNS_PERM_VIEW_' . $ttype)),
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/related.form.inc',
      'weight' => 4,
    );
  }

  $items['av/transactions/%avtxns_txn/change-status/%'] = array(
    'title' => 'Transaction Status Change',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtxns_txn_change_status_confirm_form', 2, 4),
    'access callback' => 'avtxns_txn_can_status_change',
    'access arguments' => array(2, 4),
    'type' => MENU_CALLBACK,
    'file' => 'inc/txn.form.inc',
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avtxns_theme($existing, $type, $theme, $path) {
  $themes = array();

  $template_path = $path . '/templates';

  // FORMS.
  $theme_names = array(
    'avtxns_item_list_form',
    'avtxns_txn_form_header',
    'avtxns_txn_form_body',
    'avtxns_txn_list_filter_form',
    'avtxns_special_discount_form',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  // OTHERS.
  $theme_names = array(
    'avtxns_txn_mail',
    'avtxns_txn_mail_table',
    'avtxns_txn_footer_notes',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  return $themes;
}

/**
 * Implementation of hook_mail().
 * @param $key
 * @param $message
 * @param $params
 */
function avtxns_mail($key, &$message, $params) {
  switch ($key) {
    case 'transaction':
      $message['subject'] = t('Purchase Order from @site_name - P.O.# @transaction_id', array('@transaction_id' => $params['transaction_id'], '@site_name' => variable_get('site_name', 'UCT')));
      $message['body'] = theme('avtxns_txn_mail', $params);
      // Save a copy.
      //$message['headers']['CC'] = 'ucaretrading@gmail.com';
      break;
  }
}

/**
 * Transaction List page.
 * @param $form
 * @param $form_state
 * @return array
 */
function avtxns_txns_home_form($form, &$form_state) {
// Set autocomplete off.
  $form['#attributes']['autocomplete'] = 'off';
  $transaction_types = avtxns_txn_types();
  foreach ($transaction_types as $k => $type) {
    $ttype = strtoupper($k);
    $can_create = user_access(constant('AVTXNS_PERM_CREATE_' . $ttype));
    $button_color_class = empty($type['button_class']) ? '' : $type['button_class'];
    $link_options = array('attributes' => array('class' => array("uk-button uk-margin-small-right uk-margin-small-bottom $button_color_class")));
    if (!empty($type['data-ks'])) {
      $link_options['attributes']['data-ks'] = $type['data-ks'];
    }
    $form["new_$k"] = array(
      '#markup' => l($type['name'], "{$type['base_path']}/new", $link_options),
      '#access' => $can_create,
      '#prefix' => empty($type['button_prefix']) ? '' : $type['button_prefix'],
    );
  }
  $form['hr'] = array('#markup' => '<div class="uk-text-small">&nbsp;</div>');

  $form['txns_list'] = avtxns_txn_list_form($form, $form_state);
  return $form;
}

/**
 * Return list of transaction types.
 * @param string $type
 *
 * @return array
 */
function avtxns_txn_types($type = NULL) {
  $ret = &drupal_static(__FUNCTION__, array());
  if (empty($ret)) {
    // Sales.
    $ret[AVTXNS_TXN_TYPE_SALES_ORDER] = array(
      'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_SALES_ORDER,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_SALES_ORDER,
      'transaction' => 'sales',
      'name' => 'Sales Order',
      'plural_name' => 'Sales Orders',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
    );
    $ret[AVTXNS_TXN_TYPE_DELIVERY] = array(
      'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_DELIVERY,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_DELIVERY,
      'transaction' => 'sales',
      'name' => 'Delivery',
      'plural_name' => 'Deliveries',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      'pending_txns_reference_type' => AVTXNS_TXN_TYPE_SALES_ORDER,
      'qty_change' => 'decrement',
      //'cost_change' => TRUE,
      'product_discount_check' => TRUE,
      'ref_ar_type' => 'debit',
      'check_enough_qty' => TRUE,
      'account_ids' => array(
        'default' => array(
          //AVTXN_AC_SPECIFIC_AR_ID => 'debit',
          AVTXN_AC_SPECIFIC_INVENTORY_ID => 'credit',
          AVTXN_AC_SPECIFIC_COGS_ID => 'debit',
        ),
      ),
    );
    $ret[AVTXNS_TXN_TYPE_SALES_RETURN] = array(
      'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_SALES_RETURN,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_SALES_RETURN,
      'transaction' => 'sales',
      'name' => 'Sales Return',
      'plural_name' => 'Sales Returns',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      //'pending_txns_reference_type' => AVTXNS_TXN_TYPE_DELIVERY,
      'qty_change' => 'increment',
      'ref_ar_type' => 'credit',
      'no_terms' => TRUE,
      'total_is_amount_to_credit' => TRUE,
      'account_ids' => array(
        'default' => array(
          //AVTXN_AC_SPECIFIC_AR_ID => 'debit',
          AVTXN_AC_SPECIFIC_INVENTORY_ID => 'debit',
          AVTXN_AC_SPECIFIC_COGS_ID => 'credit',
        ),
      ),
    );
    $ret[AVTXNS_TXN_TYPE_INVOICE] = array(
      'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_INVOICE,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_INVOICE,
      'transaction' => 'sales',
      'name' => 'Invoice',
      'plural_name' => 'Invoices',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      'ref_ar_type' => 'credit',
      //'client_statuses' => array(AVCLIENT_STATUS_ACTIVE, AVCLIENT_STATUS_SUSPENDED),
      'bill' => TRUE,
      //'pr_statuses' => array(AVTXNS_TXN_STATUS_OPEN, AVTXNS_TXN_STATUS_LOCKED), // Allowed statuses on when referenced.
      'tpl_suffix' => '',
      'payable' => TRUE,
      'pending_txns_reference_type' => AVTXNS_TXN_TYPE_DELIVERY,
      //'pending_return_type' => AVTXNS_TXN_TYPE_SALES_RETURN,
      'credit_txn_types' => array(AVTXNS_TXN_TYPE_SALES_RETURN, AVTXNS_TXN_TYPE_CREDIT_MEMO, AVTXNS_TXN_TYPE_PAYMENT),
      'account_ids' => array(
        AVTXNS_TXN_TYPE_DELIVERY => array(
          AVTXN_AC_SPECIFIC_AR_ID => 'debit',
          AVTXN_AC_SPECIFIC_SALES_ID => 'credit',
        ),
        AVTXNS_TXN_TYPE_SALES_RETURN => array(
          //AVTXN_AC_SPECIFIC_AR_ID => 'credit', BAKA MAGDOBLE SA SALES RETURN
          AVTXN_AC_SPECIFIC_SALES_RETURN_ID => 'debit',
        ),
        AVTXNS_TXN_TYPE_CREDIT_MEMO => array(
          //AVTXN_AC_SPECIFIC_AR_ID => 'credit', BAKA MAGDOBLE SA SALES RETURN
          AVTXN_AC_SPECIFIC_SALES_RETURN_ID => 'debit',
        ),
        AVTXNS_TXN_TYPE_PAYMENT => array(
          //AVTXN_AC_SPECIFIC_AR_ID => 'credit', BAKA MAGDOBLE SA SALES RETURN
          AVTXN_AC_SPECIFIC_SALES_RETURN_ID => 'debit',
        ),
      ),
    );
    $ret[AVTXNS_TXN_TYPE_PAYMENT] = array(
      'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_PAYMENT,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_PAYMENT,
      'transaction' => 'sales',
      'name' => 'Received Payment',
      'plural_name' => 'Received Payment',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      'pending_txns_reference_type' => array(AVTXNS_TXN_TYPE_INVOICE, AVTXNS_TXN_TYPE_CUSTOMER_CHARGES),
      //'client_statuses' => array(AVCLIENT_STATUS_ACTIVE, AVCLIENT_STATUS_SUSPENDED),
      'payment' => TRUE,
      //'cant_change_date' => TRUE,
      'no_terms' => TRUE,
      //'no_agent' => TRUE,
      'total_is_entered_amount' => TRUE,
      'ref_ar_type' => 'credit',
      'non_product' => TRUE,
    );

    // Purchase.
    $ret[AVTXNS_TXN_TYPE_PURCHASE_ORDER] = array(
      'button_class' => 'uk-button-primary',
      'type' => AVTXNS_TXN_TYPE_PURCHASE_ORDER,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_PURCHASE_ORDER,
      'transaction' => 'purchase',
      'name' => 'Purchase Order',
      'plural_name' => 'Purchase Orders',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
    );
    $ret[AVTXNS_TXN_TYPE_RECEIVE] = array(
      'button_class' => 'uk-button-primary',
      'type' => AVTXNS_TXN_TYPE_RECEIVE,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_RECEIVE,
      'transaction' => 'purchase',
      'name' => 'Received Items',
      'plural_name' => 'Received items',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
      'pending_txns_reference_type' => AVTXNS_TXN_TYPE_PURCHASE_ORDER,
      'qty_change' => 'increment',
      'cost_change' => TRUE,
      //'product_discount_overwrite' => TRUE,
    );
    $ret[AVTXNS_TXN_TYPE_PURCHASE_RETURN] = array(
      'button_class' => 'uk-button-primary',
      'type' => AVTXNS_TXN_TYPE_PURCHASE_RETURN,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_PURCHASE_RETURN,
      'transaction' => 'purchase',
      'name' => 'Purchase Return',
      'plural_name' => 'Purchase Returns',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
      'qty_change' => 'decrement',
      'no_terms' => TRUE,
      'total_is_amount_to_credit' => TRUE,
      'check_enough_qty' => TRUE,
    );
    $ret[AVTXNS_TXN_TYPE_BILL] = array(
      'button_class' => 'uk-button-primary',
      'type' => AVTXNS_TXN_TYPE_BILL,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_BILL,
      'transaction' => 'purchase',
      'name' => 'Bill',
      'plural_name' => 'Bills',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
      'pending_txns_reference_type' => AVTXNS_TXN_TYPE_RECEIVE,
      'credit_txn_types' => array(AVTXNS_TXN_TYPE_PURCHASE_RETURN, AVTXNS_TXN_TYPE_VENDOR_CREDIT, AVTXNS_TXN_TYPE_PAY_BILL),
      //'pending_return_type' => AVTXNS_TXN_TYPE_PURCHASE_RETURN,
      'payable_type' => 'credit',
      //'client_statuses' => array(AVCLIENT_STATUS_ACTIVE),
      'bill' => TRUE,
      'tpl_suffix' => '',
      //'pr_statuses' => array(AVTXNS_TXN_STATUS_OPEN, AVTXNS_TXN_STATUS_LOCKED), // Allowed statuses on when referenced.
      'payable' => TRUE,
    );
    $ret[AVTXNS_TXN_TYPE_PAY_BILL] = array(
      'button_class' => 'uk-button-primary',
      'type' => AVTXNS_TXN_TYPE_PAY_BILL,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_PAY_BILL,
      'transaction' => 'purchase',
      'name' => 'Bills Payment',
      'plural_name' => 'Paid Bills',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
      'pending_txns_reference_type' => array(AVTXNS_TXN_TYPE_BILL, AVTXNS_TXN_TYPE_OTHER_BILLS),
      //'client_statuses' => array(AVCLIENT_STATUS_ACTIVE),
      'payment' => TRUE,
      //'cant_change_date' => TRUE,
      'tpl_suffix' => AVTXNS_TXN_TYPE_PAYMENT,
      'no_terms' => TRUE,
      //'no_agent' => TRUE,
      'total_is_entered_amount' => TRUE,
      'non_product' => TRUE,
    );

    // Accounting.
    $ret[AVTXNS_TXN_TYPE_JOURNAL] = array(
      //'button_class' => 'uk-button-warning',
      'button_prefix' => '<br />',
      'type' => AVTXNS_TXN_TYPE_JOURNAL,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_JOURNAL,
      'transaction' => 'accounts',
      'name' => 'Journal',
      'plural_name' => 'Journal Entries',
      //'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      'non_product' => TRUE,
      'no_total' => TRUE,
      'no_terms' => TRUE,
      'no_agent' => TRUE,
    );
    $ret[AVTXNS_TXN_TYPE_CREDIT_MEMO] = array(
      //'button_class' => 'uk-button-warning',
      'type' => AVTXNS_TXN_TYPE_CREDIT_MEMO,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_CREDIT_MEMO,
      'transaction' => 'accounts',
      'name' => 'Credit Memo',
      'plural_name' => 'Credit Memos',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      'non_product' => TRUE,
      //'no_total' => TRUE,
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'total_is_entered_amount' => TRUE,
      'total_is_amount_to_credit' => TRUE,
      'ref_ar_type' => 'credit',
      'default_account_id' => array(
        AVTXN_AC_SPECIFIC_AR_ID => 'credit',
      ),
    );
    $ret[AVTXNS_TXN_TYPE_VENDOR_CREDIT] = array(
      //'button_class' => 'uk-button-warning',
      'type' => AVTXNS_TXN_TYPE_VENDOR_CREDIT,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_VENDOR_CREDIT,
      'transaction' => 'accounts',
      'name' => 'Vendor Credit',
      'plural_name' => 'Vendor Credits',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
      'non_product' => TRUE,
      //'no_total' => TRUE,
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'total_is_entered_amount' => TRUE,
      'tpl_suffix' => AVTXNS_TXN_TYPE_CREDIT_MEMO,
      'total_is_amount_to_credit' => TRUE,
      'default_account_id' => array(
        AVTXN_AC_SPECIFIC_AP_ID => 'debit',
      ),
    );
    $ret[AVTXNS_TXN_TYPE_CUSTOMER_CHARGES] = array(
      //'button_class' => 'uk-button-warning',
      'type' => AVTXNS_TXN_TYPE_CUSTOMER_CHARGES,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_CUSTOMER_CHARGES,
      'transaction' => 'accounts',
      'name' => 'Customer Charges',
      'plural_name' => 'Customer Charges',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      'non_product' => TRUE,
      //'no_total' => TRUE,
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'total_is_entered_amount' => TRUE,
      'tpl_suffix' => AVTXNS_TXN_TYPE_CREDIT_MEMO,
      //'pr_statuses' => array(AVTXNS_TXN_STATUS_OPEN, AVTXNS_TXN_STATUS_LOCKED), // Allowed statuses on when referenced.
      'payable' => TRUE,
      'credit_txn_types' => array(AVTXNS_TXN_TYPE_SALES_RETURN, AVTXNS_TXN_TYPE_CREDIT_MEMO, AVTXNS_TXN_TYPE_PAYMENT),
      'ref_ar_type' => 'credit',
      'default_account_id' => array(
        AVTXN_AC_SPECIFIC_AR_ID => 'debit',
      ),
    );
    $ret[AVTXNS_TXN_TYPE_OTHER_BILLS] = array(
      //'button_class' => 'uk-button-warning',
      'type' => AVTXNS_TXN_TYPE_OTHER_BILLS,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_OTHER_BILLS,
      'transaction' => 'accounts',
      'name' => 'Other Bills',
      'plural_name' => 'Other Bills',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_VENDOR),
      'non_product' => TRUE,
      //'no_total' => TRUE,
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'total_is_entered_amount' => TRUE,
      'tpl_suffix' => AVTXNS_TXN_TYPE_CREDIT_MEMO,
      //'pr_statuses' => array(AVTXNS_TXN_STATUS_OPEN, AVTXNS_TXN_STATUS_LOCKED), // Allowed statuses on when referenced.
      'payable' => TRUE,
      'credit_txn_types' => array(AVTXNS_TXN_TYPE_PURCHASE_RETURN, AVTXNS_TXN_TYPE_VENDOR_CREDIT, AVTXNS_TXN_TYPE_PAY_BILL),
      'default_account_id' => array(
        AVTXN_AC_SPECIFIC_AP_ID => 'credit',
      ),
    );


    // Inventory.
    $ret[AVTXNS_TXN_TYPE_STOCK_ADJUSTMENT] = array(
      //'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_STOCK_ADJUSTMENT,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_STOCK_ADJUSTMENT,
      'transaction' => 'inventory',
      'name' => 'Stock Adjustment',
      'plural_name' => 'Stock Adjustments',
      //'ctd' => avclients_client_types(AVCLIENT_TYPE_CUSTOMER),
      //'pending_txns_reference_type' => AVTXNS_TXN_TYPE_SALES_ORDER,
      'qty_change' => 'increment',
      //'cost_change' => TRUE,
      //'product_discount_check' => TRUE,
      //'receivable_type' => 'debit',
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'no_total' => TRUE,
      'prevent_duplicate_product' => TRUE,
      'cant_edit' => TRUE,
      'cant_change_status' => TRUE,
      'cant_change_date' => TRUE,
    );
    $ret[AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT] = array(
      //'button_class' => 'uk-button-success',
      'type' => AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_STOCK_TRANSFER_OUT,
      'transaction' => 'inventory',
      'name' => 'Stock Transfer - OUT',
      'plural_name' => 'Stock Transfers - OUT',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_BRANCH),
      'qty_change' => 'decrement',
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'no_discount' => TRUE,
      'check_enough_qty' => TRUE,
      //'account_ids' => array(
      //  'default' => array(
      //    //AVTXN_AC_SPECIFIC_AR_ID => 'debit',
      //    AVTXN_AC_SPECIFIC_INVENTORY_ID => 'credit',
      //    AVTXN_AC_SPECIFIC_COGS_ID => 'debit',
      //  ),
      //),
    );
    $ret[AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN] = array(
      //'button_class' => 'uk-button-primary',
      'type' => AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN,
      'base_path' => 'av/' . AVTXNS_TXN_TYPE_STOCK_TRANSFER_IN,
      'transaction' => 'inventory',
      'name' => 'Stock Transfer - IN',
      'plural_name' => 'Stock Transfers - IN',
      'ctd' => avclients_client_types(AVCLIENT_TYPE_BRANCH),
      'qty_change' => 'increment',
      //'cost_change' => TRUE,
      'no_terms' => TRUE,
      'no_agent' => TRUE,
      'no_discount' => TRUE,
      //'product_discount_overwrite' => TRUE,
    );
  }

  $index = 1;
  foreach ($ret as $r_k => $r) {
    $ret[$r_k]['tpl_suffix'] = isset($ret[$r_k]['tpl_suffix']) ? $ret[$r_k]['tpl_suffix'] : $r_k;
    if ($index != 0) {
      if ($index > 9) $index = 0;
      $ret[$r_k]['data-ks'] = 'ALT+' . $index++;
      if ($index == 1) $index = 0;
    }
  }

  if (isset($ret[$type])) {
    return $ret[$type];
  }
  elseif (is_null($type)) {
    return $ret;
  }
  return NULL;
}

function avtxns_txn_list_form($form, &$form_state, $options = array()) {
  $form = array(
    '#visible_in_view_mode' => TRUE,
    //'#prefix' => '<div>'
  );

  if (empty($options['#hide_filter_form'])) {
    $filter_form_settings = array(
      'avtxn.id' => array('#access' => TRUE),
      'avclients.display_name' => array(
        '#autocomplete_path' => 'av/clients/autocomplete/' . AVCLIENT_TYPE_CUSTOMER . '-' . AVCLIENT_TYPE_VENDOR . '/' . AVCLIENT_STATUS_ACTIVE . '-' . AVCLIENT_STATUS_SUSPENDED,
        '#attributes' => array(
          'placeholder' => 'customer or vendor name',
          'class' => array('trigger-ajax-search'),
        ),
      ),
      //'search_text' => array('#access' => TRUE),
      'avtxn.transaction_date' => array('#access' => TRUE),
      'avtxn.transaction_type' => array('#access' => TRUE),
      'avtxn.status' => array('#access' => TRUE),
    );
    $form['transaction_list_filter'] = avtxns_txn_list_filter_form(NULL, $form_state, $filter_form_settings);
    $form['transaction_list_filter']['search_text']['#attributes']['placeholder'] = 'search agent, customer, vendor';
  }
  $client_header = 'Client';
  //if (arg(1) == 'vendors') {
  //  $client_header = 'Vendor';
  //}
  //elseif (arg(1) == 'customers') {
  //  $client_header = 'Customer';
  //}
  $header = array(
    //'status' => array('data' => '&nbsp;', 'style' => 'width: 65px;'),
    'transaction_id' => array('data' => 'Txn.#', 'field' => 'avtxn.id'),
    'date' => array('data' => 'Date', 'field' => 'avtxn.transaction_date'),
    'transaction_type' => array('data' => 'Type', 'field' => 'avtxn.transaction_type'),
    'client_name' => array('data' => $client_header, 'field' => 'avclients.display_name'),
    'agent_name' => array('data' => 'Agent', 'field' => 'avcat_agent.title'),
    'created_by' => array('data' => 'Created by', 'field' => 'u.name'),
  );

  if (!empty($options['#hide_filter_form'])) {
    foreach ($header as $h_k => $h) {
      unset($header[$h_k]['field']);
    }
  }

  $required_filter_query = empty($options['#filter_query']) ? array() : $options['#filter_query'];
  $user_filter = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $filter_query = empty($user_filter['filter_query']) ? array() : $user_filter['filter_query'];
  $filter_query = array_merge_recursive($filter_query, $required_filter_query);

  // Set table pagination and sort settings.
  if (!empty($user_filter['settings']['table_href'])) {
    $table_ajax_href = $user_filter['settings']['table_href'];
    $href_parts = parse_url($table_ajax_href);
    if (!empty($href_parts['query'])) {
      parse_str($href_parts['query'], $href_query);
      foreach ($href_query as $k => $v) {
        $_GET[$k] = $v;
      }
    }
  }

  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];
  // Make sure only transactions that this user has VIEW permission are listed.
  $ttypes_array = avtxns_txn_types_options_array(TRUE);
  $allowed_ttypes = array_keys($ttypes_array);
  $allowed_ttypes = array_filter($allowed_ttypes);
  if (!empty($allowed_ttypes) && empty($user_filter['avtxn.transaction_type'])) {
    $where[] = 'avtxn.transaction_type IN (:allowed_ttypes)';
    $args[':allowed_ttypes'] = $allowed_ttypes;
  }

  $rows = array();
  if (!empty($allowed_ttypes)) {
    $select = $joins = array();
    $select[] = 'avclients.display_name';
    $select[] = 'avcat_agent.title AS agent_name';
    $select[] = 'u.name';
    $joins[] = 'LEFT JOIN {avtbl_clients} AS avclients ON avclients.id = avtxn.client_id';
    $joins[] = 'LEFT JOIN {avtbl_categories} AS avcat_agent ON avcat_agent.id = avtxn.agent_id';
    $joins[] = 'LEFT JOIN {users} AS u ON u.uid = avtxn.uid';

    $rows_per_page = empty($options['#hide_filter_form']) ? 30 : 10;
    $total_count = avtxns_txns_query_load($where, $args, NULL, NULL, NULL, $select, $joins, array(), TRUE);
    $page = pager_default_initialize($total_count, $rows_per_page);
    $offset = $rows_per_page * $page;
    $order_by = avbase_build_header_order_array($header);
    $transactions = avtxns_txns_query_load($where, $args, $rows_per_page, $offset, $order_by, $select, $joins);
    //$index = 0;
    foreach ($transactions as $row) {
      $sd = avtxns_txn_status_details($row->status);
      $row_class = empty($sd['color_class']) ? '' : $sd['color_class'];
      $badge_class = empty($sd['badge_class']) ? '' : $sd['badge_class'];
      $badge_icon = empty($sd['badge_icon']) ? '' : $sd['badge_icon'];
      $badge_html = '';
      if (!empty($badge_class)) {
        $badge_icon_html = '<i class="uk-icon-justify uk-icon-' . $badge_icon . '"></i>';
        $badge_html = empty($sd['title']) ? '' : ('<span title="' . $sd['title'] . '" class="uk-badge ' . $badge_class . ' uk-margin-small-right" style="position: relative; top: -2px;">' . $badge_icon_html . '</span>');
      }

      $created_by_user = array(
        'account' => (object)array('name' => $row->name, 'uid' => $row->uid),
      );
      if ($row->uid) {
        $created_by_user['link_path'] = "user/{$row->uid}";
      }
      $transaction_type = avtxns_txn_types($row->transaction_type);
      $view_path = "{$transaction_type['base_path']}/$row->id/view";
      $rows[$row->id] = array(
        'data' => array(
          //'status' => $badge_html,
          'transaction_id' => l(strtoupper($row->transaction_type) . '# ' . $row->id, $view_path),
          'date' => l(format_date($row->transaction_date, 'custom', 'M d, Y'), $view_path),
          'transaction_type' => $badge_html . l($transaction_type['name'], $view_path),
          'client_name' => /*$rows[$index]['data'][] =*/
            check_plain($row->display_name),
          'agent_name' => check_plain($row->agent_name),
          'created_by' => $row->uid ? theme('username', $created_by_user) : '',
        ),
        'class' => array($row_class),
      );
    }
  }

  $table_attributes = array(
    'id' => 'transaction-list-table',
    'class' => array('uk-table-condensed'),
  );

  $pager_html = empty($options['#hide_filter_form']) ? theme('pager', array('tags' => array())) : '';
  $form['transaction_list_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => '<div class="uk-text-muted">' . t('No match found.') . '</div>',
    '#attributes' => $table_attributes,
    '#prefix' => '<div id="transaction-list-table-wrapper">',
    '#suffix' => $pager_html . '<!--Do not remove me.--></div>',
  );

  //if (empty($rows)) {
  //  $table_markup = '<div class="uk-margin-top uk-text-muted">No match found.</div>';
  //}
  //else {
  //  $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes));
  //}
  //$form['transaction_list_table']['#markup'] = '<div id="transaction-list-table-wrapper">' . $table_markup . '<!--Do not remove me--></div>';
  return $form;
}

/**
 * Generic Transaction List Filter form.
 * @param $form
 * @param $form_state
 * @param array $settings
 *
 * @return mixed
 */
function avtxns_txn_list_filter_form($form, &$form_state, $settings = array()) {
  $fields = array(
    '#theme' => 'avtxns_txn_list_filter_form',
    '#tree' => TRUE,
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'avtxns-txn-list-filter-form',
    ),
    '#attached' => array(
      'js' => array(AVTXNS_MODULE_PATH . '/js/transaction_list_filter.form.js'),
    ),
  );

  if (!empty($settings['avtxn.id'])) {
    $fields['avtxn.id'] = empty($settings['avtxn.id']) ? array() : $settings['avtxn.id'];
    $fields['avtxn.id'] += array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('trigger-ajax-search trigger-search-on-keyup'),
        'placeholder' => '#',
      ),
      '#icon_key' => 'search',
    );
  }

  if (!empty($settings['search_text'])) {
    $fields['search_text'] = empty($settings['search_text']) ? array() : $settings['search_text'];
    $fields['search_text'] += array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('trigger-ajax-search trigger-search-on-keyup'),
        'placeholder' => 'customer / vendor / agent name',
      ),
      '#icon_key' => 'search',
    );
  }

  if (!empty($settings['avcat_agent.title'])) {
    $fields['avcat_agent.title'] = empty($settings['avcat_agent.title']) ? array() : $settings['avcat_agent.title'];
    $fields['avcat_agent.title'] += array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#attributes' => array(
        'placeholder' => 'Agent name',
        'class' => array('trigger-ajax-search'),
      ),
    );
  }

  if (!empty($settings['avcat_area.title'])) {
    $fields['avcat_area.title'] = empty($settings['avcat_area.title']) ? array() : $settings['avcat_area.title'];
    $fields['avcat_area.title'] += array(
      '#title' => 'Area',
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#attributes' => array(
        'placeholder' => 'Area',
        'class' => array('trigger-ajax-search'),
      ),
      '#autocomplete_path' => 'av/categories/area/autocomplete',
    );
  }

  if (!empty($settings['avcat_principal.title'])) {
    $fields['avcat_principal.title'] = empty($settings['avcat_principal.title']) ? array() : $settings['avcat_principal.title'];
    $fields['avcat_principal.title'] += array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
        'placeholder' => 'Principal'
      ),
    );
  }

  if (!empty($settings['avclients.display_name'])) {
    $fields['avclients.display_name'] = empty($settings['avclients.display_name']) ? array() : $settings['avclients.display_name'];
    $fields['avclients.display_name'] += array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#attributes' => array(
        'placeholder' => 'Account name',
        'class' => array('trigger-ajax-search'),
      ),
    );
  }




  if (!empty($settings['avtxn.transaction_date'])) {
    $fields['avtxn.transaction_date'] = empty($settings['avtxn.transaction_date']) ? array() : $settings['avtxn.transaction_date'];
    $fields['avtxn.transaction_date'] += array(
      '#type' => 'textfield',
      //'#default_value' => !empty($row->expiry_date) ? format_date($row->expiry_date, 'custom', $date_format) : '',
      //'#element_validate' => array('avbase_element_validate_date'),
      //'#av_date_format' => $date_format,
      '#icon_key' => 'calendar',
      '#attributes' => array(
        'data-uk-datepicker' => "{format:'MMMM DD, YYYY'}",
        'class' => array('trigger-ajax-search'),
        'readonly' => 'readonly',
      ),
    );
  }

  if (!empty($settings['date_auto']) && !empty($settings['date_from']) && !empty($settings['date_to'])) {
    $fields['settings']['date_auto'] = empty($settings['date_auto']) ? array() : $settings['date_auto'];
    $fields['settings']['date_auto'] += array(
      '#id' => 'date-auto',
      '#type' => 'select',
      '#options' => avtxns_txn_list_filter_date_auto_options_array(),
      '#attributes' => array(
        //'class' => array('trigger-ajax-search'),
      ),
    );
    $js_settings = array('avbase' => array());
    $js_settings['avbase']['date_auto'] = avtxns_txn_list_filter_date_auto_options();
    drupal_add_js($js_settings, 'setting');
  }
  if (!empty($settings['date_to'])) {
    $fields['date_to'] = empty($settings['date_to']) ? array() : $settings['date_to'];
    $fields['date_to'] += array(
      '#id' => 'date-to',
      '#type' => 'textfield',
      '#icon_key' => 'calendar',
      '#attributes' => array(
        'data-uk-datepicker' => "{format:'MMMM DD, YYYY'}",
        'class' => array('trigger-ajax-search'),
        'readonly' => 'readonly',
      ),
    );
  }
  if (!empty($settings['date_from'])) {
    $fields['date_from'] = empty($settings['date_from']) ? array() : $settings['date_from'];
    $fields['date_from'] += array(
      '#id' => 'date-from',
      '#type' => 'textfield',
      '#icon_key' => 'calendar',
      '#attributes' => array(
        'data-uk-datepicker' => "{format:'MMMM DD, YYYY'}",
        'class' => array('trigger-ajax-search'),
        'readonly' => 'readonly',
      ),
    );
  }

  if (!empty($settings['avtxn.transaction_type'])) {
    $fields['avtxn.transaction_type'] = empty($settings['avtxn.transaction_type']) ? array() : $settings['avtxn.transaction_type'];
    $fields['avtxn.transaction_type'] += array(
      '#type' => 'select',
      '#options' => avtxns_txn_types_options_array(),
      '#empty_value' => '',
      '#empty_option' => '- transaction type -',
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }

  if (!empty($settings['avtxn.status'])) {
    $fields['avtxn.status'] = empty($settings['avtxn.status']) ? array() : $settings['avtxn.status'];
    $fields['avtxn.status'] += array(
      '#type' => 'select',
      '#options' => avtxns_txn_status_options_array(),
      '#empty_value' => '',
      '#empty_option' => '- status -',
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }

  if (!empty($settings['simplified_status'])) {
    $fields['simplified_status'] = empty($settings['simplified_status']) ? array() : $settings['simplified_status'];
    $fields['simplified_status'] += array(
      '#type' => 'select',
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
    if (isset($fields['simplified_status']['#default_value'])) {
      $fields['simplified_status']['#attributes']['data-default-value'] = $fields['simplified_status']['#default_value'];
    }
  }

  if (!empty($settings['overdue'])) {
    $fields['overdue'] = empty($settings['overdue']) ? array() : $settings['overdue'];
    $fields['overdue'] += array(
      '#type' => 'select',
      '#options' => array(
        0 => 'All',
        1 => 'Overdue',
      ),
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }

  if (!empty($settings['table_group_by'])) {
    $fields['settings']['table_group_by'] = empty($settings['table_group_by']) ? array() : $settings['table_group_by'];
    $fields['settings']['table_group_by'] += array(
      '#type' => 'radios',
      '#title' => 'Group by',
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }

  if (!empty($settings['table_columns'])) {
    $fields['settings']['table_columns'] = empty($settings['table_columns']) ? array() : $settings['table_columns'];
    $fields['settings']['table_columns'] += array(
      '#type' => 'checkboxes',
      '#title' => 'Columns',
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }

  if (!empty($settings['all_products'])) {
    $fields['settings']['all_products'] = empty($settings['all_products']) ? array() : $settings['all_products'];
    $fields['settings']['all_products'] += array(
      '#type' => 'select',
      '#title' => 'Products',
      '#options' => array('In a DR, SO, PO or transferred on selected dates', 'All products'),
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }
  if (!empty($settings['stock_status'])) {
    $fields['settings']['stock_status'] = empty($settings['stock_status']) ? array() : $settings['stock_status'];
    $fields['settings']['stock_status'] += array(
      '#type' => 'select',
      '#title' => 'Status',
      '#options' => array(
        'all' => 'All',
        'low' => 'Low stock',
        'os' => 'Out of stock'
      ),
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }
  if (!empty($settings['principal_name'])) {
    $fields['settings']['principal_name'] = empty($settings['principal_name']) ? array() : $settings['principal_name'];
    $fields['settings']['principal_name'] += array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
        'placeholder' => 'Principal'
      ),
    );
  }
  if (!empty($settings['preferred_vendor'])) {
    $fields['settings']['preferred_vendor'] = empty($settings['preferred_vendor']) ? array() : $settings['preferred_vendor'];
    $fields['settings']['preferred_vendor'] += array(
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#attributes' => array(
        'placeholder' => 'Vendor name',
        'class' => array('trigger-ajax-search'),
      ),
    );
  }
  if (!empty($settings['selectable'])) {
    $fields['settings']['selectable'] = empty($settings['selectable']) ? array() : $settings['selectable'];
    $fields['settings']['selectable'] += array(
      '#type' => 'select',
      '#title' => 'Selectable list',
      '#options' => array(0 => 'No', 1 => 'Yes (response to filters may become slower)'),
      '#attributes' => array(
        'class' => array('trigger-ajax-search'),
      ),
    );
  }
  // Set fields' resistance to reset button.
  //foreach ($fields as $k => $v) {
  //
  //}

  // Buttons.
  $fields['buttons']['reset_button'] = empty($settings['reset_button']) ? array() : $settings['reset_button'];
  $fields['buttons']['reset_button'] += array(
    '#id' => 'transaction-reset-btn',
    '#type' => 'submit',
    '#value' => t('reset filter'),
    //'#button_label' => '<i class="uk-icon-remove"></i>',
  );
  $fields['buttons']['reset_button']['#attributes']['data-ks'] = 'CTRL+DEL';

  $fields['buttons']['search_button'] = empty($settings['search_button']) ? array() : $settings['search_button'];
  $fields['buttons']['search_button'] += array(
    '#id' => 'transaction-search-btn',
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('avtxns_txn_list_filter_form_submit'),
    '#limit_validation_errors' => array(array('avtxns_tl_filter')),
    '#attributes' => array(
      'class' => array('uk-hidden')
    ),
    '#ajax' => array(
      'callback' => 'avtxns_txn_form_ajax_search',
      'wrapper' => 'transaction-list-table-wrapper',
      'effect' => 'none',
      //'event' => 'click',
      'progress' => array(),
    ),
  );

  $fields['settings']['table_href'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'id' => 'transaction-list-table-href',
      'class' => array('trigger-ajax-search'),
    ),
  );

  $form['avtxns_tl_filter'] = $fields;

  // Apply default values to $form_state.
  if (empty($form_state['values']['avtxns_tl_filter'])) {
    foreach (element_children($fields) as $f_k) {
      if ($f_k == 'buttons') {
        continue;
      }
      elseif ($f_k == 'settings') {
        foreach (element_children($fields[$f_k]) as $ff_k) {
          if (isset($fields[$f_k][$ff_k]['#default_value'])) {
            $default_value = $fields[$f_k][$ff_k]['#default_value'];
            if (is_array($default_value)) {
              $default_value = array_combine($default_value, $default_value);
            }
            $form_state['values']['avtxns_tl_filter'][$f_k][$ff_k] = $default_value;
          }
        }
      }
      elseif (isset($fields[$f_k]['#default_value'])) {
        $form_state['values']['avtxns_tl_filter'][$f_k] = $fields[$f_k]['#default_value'];
      }
    }
    if (!empty($form_state['values']['avtxns_tl_filter'])) {
      avtxns_txn_list_filter_form_submit($form, $form_state, TRUE);
    }
  }
  return $form;
}

function avtxns_txn_list_filter_form_submit($form, &$form_state, $from_default = FALSE) {
  if (!$from_default) {
    $form_state['rebuild'] = TRUE;
  }

  $filter_values = empty($form_state['values']['avtxns_tl_filter']) ? array() : $form_state['values']['avtxns_tl_filter'];
  $arg_index = 0;
  $where = $args = array();
  //$query_exceptions = empty($form['#transaction_query_exceptions']) ? array() : $form['#transaction_query_exceptions'];
  foreach ($filter_values as $k => $v) {
    if ($k == 'buttons' || $k == 'settings') {
      continue;
    }
    //$query_field_aliases = empty($query_exceptions[$k]['#query_field_aliases']) ? array() : $query_exceptions[$k]['#query_field_aliases'];
    $v = trim($v);
    $arg_name = 'arg_' . $arg_index++;
    if ($k == 'search_text' && $v != '') {
      $or = array();
      $or[] = "avcat_agent.title LIKE :$arg_name";
      $or[] = "avclients.display_name LIKE :$arg_name";
      $where[] = '(' . implode(' OR ', $or) . ')';
      $args[":$arg_name"] = '%' . db_like($v) . '%';
      continue;
    }
    elseif ($k == 'avtxn.transaction_date' && $v != '') {
      $timestamp = strtotime($v);
      if (empty($timestamp)) {
        continue;
      }
      $next_day_timestamp = strtotime('+1 day', $timestamp);
      $where[] = 'avtxn.transaction_date >= :stamp1 AND avtxn.transaction_date < :stamp2';
      $args[':stamp1'] = $timestamp;
      $args[':stamp2'] = $next_day_timestamp;
      continue;
    }
    elseif ($k == 'date_to' && $v != '') {
      avtxns_txn_filter_apply_date($where, $args, $v, 'date_to');
      continue;
    }
    elseif ($k == 'date_from' && $v != '') {
      avtxns_txn_filter_apply_date($where, $args, $v);
      continue;
    }
    elseif ($k == 'simplified_status') {
      $simplified_statuses = explode('-', $v);
      $where['simplified_statuses'] = 'avtxn.status IN (:simplified_statuses)';
      $args[':simplified_statuses'] = $simplified_statuses;
      continue;
    }
    elseif ($k == 'overdue') {
      if (!empty($v)) {
        $where['overdue'] = avtxns_txn_overdue_query();
      }
      continue;
    }

    if ($v != '') {
      //if (!empty($query_field_aliases)) {
      //  $this_or = array();
      //  foreach ($query_field_aliases as $qfa) {
      //    $this_or[] = "$qfa = :$arg_name";
      //  }
      //  if (!empty($this_or)) {
      //    $where[] = '(' . implode(' OR ', $this_or) . ')';
      //  }
      //}
      //else {
        $where[] = "{$k} = :$arg_name";
      //}
      $args[":$arg_name"] = $v;
    }
  }

  $form_state['values']['avtxns_tl_filter']['filter_query'] = array('where' => $where, 'args' => $args);
}


function avtxns_txn_form_ajax_search($form, $form_state) {
  $trigger = $form_state['triggering_element'];


  switch ($trigger['#id']) {
    case 'transaction-search-btn':
      $target_table_parents = $trigger['#array_parents'];
      $depth = count($target_table_parents) - 4;
      if ($depth > 0) {
        $target_table_parents = array_slice($target_table_parents, 0, $depth);
      }
      else {
        $target_table_parents = empty($trigger['#table_parents']) ? array() : $trigger['#table_parents'];
      }
      $target_table_parents[] = 'transaction_list_table';
      $transaction_list_form = drupal_array_get_nested_value($form, $target_table_parents);
      //dpm($form);
      //dpm($target_table_parents);
      //dpm($transaction_list_form);
      //return $form;
      return $transaction_list_form;
      break;
  }

  return $form;
}

/**
 * Check if user is allowed to change transaction status.
 * @param $transaction
 * @param $status
 * @return bool
 */
function avtxns_txn_can_status_change($transaction, $status) {
  if (empty($transaction->transaction_type)) {
    return FALSE;
  }

  $ttd = avtxns_txn_types($transaction->transaction_type);
  if (!empty($ttd['cant_change_status'])) {
    return FALSE;
  }

  $transaction_type = strtoupper($transaction->transaction_type);

  if ($status == AVTXNS_TXN_STATUS_VOID) {
    return user_access(constant('AVTXNS_PERM_VOID_' . $transaction_type));
  }
  elseif ($status == AVTXNS_TXN_STATUS_OPEN || $status == AVTXNS_TXN_STATUS_PENDING) {
    if (!empty($ttd['payment'])) {
      return user_access(constant('AVTXNS_PERM_EDIT_' . $transaction_type));
    }
    else {
      return user_access(constant('AVTXNS_PERM_OPEN_' . $transaction_type));
    }
  }
  else {
    return TRUE;
  }
}

function avtxns_quick_txn_search($id) {
  $id = (int) $id;
  $type = db_query("SELECT transaction_type FROM {avtbl_transactions} WHERE id = :id", array(':id' => $id))->fetchField();
  if (empty($type)) {
    drupal_set_message('No match found.', 'error');
    drupal_goto('av/transactions');
  }
  else {
    $ttd = avtxns_txn_types($type);
    drupal_goto($ttd['base_path'] . '/' . $id . '/view');
  }
}
function avtxns_return_form_access($transaction_type, $row) {
  if (empty($row->id) || $row->transaction_type != $transaction_type) {
    return FALSE;
  }

  if ($row->status != AVTXNS_TXN_STATUS_CLOSED) {
    return FALSE;
  }

  return user_access(constant('AVTXNS_PERM_CREATE_' . strtoupper(AVTXNS_TXN_TYPE_SALES_RETURN)));
}