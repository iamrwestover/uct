<?php

/**
 * @file
 * AV Products module.
 */

define('AVTRANS_MODULE_PATH', drupal_get_path('module', 'avtrans'));

//require_once 'inc/helpers.inc';
module_load_include('inc', 'avtrans', 'inc/helpers');

/**
 * Implementation of hook_menu().
 */
function avtrans_menu() {
  $items['av/transactions'] = array(
    'title' => 'Transactions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_transaction_home_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'av',
    'expanded' => TRUE,
  );
  $items['av/po'] = array(
    'title' => 'Purchase Orders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_transaction_home_form'),
    'access callback' => 'user_is_logged_in',
  );
  $items['av/po/new'] = array(
    'title' => 'New Purchase Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_po_form', NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/po.form.inc',
    'weight' => 10,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  $items['av/po/%avtrans_po/view'] = array(
    'title' => 'View Purchase Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_po_form', 2, TRUE),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/po.form.inc',
    'weight' => 0,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  //$items['av/po/%avtrans_po/edit'] = array(
  //  'title' => 'Edit Purchase Order',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('avtrans_po_form', 2),
  //  'access callback' => 'user_is_logged_in',
  //  'type' => MENU_LOCAL_TASK,
  //  'file' => 'inc/po.form.inc',
  //  'weight' => 1,
  //);
  $items['av/gr'] = array(
    'title' => 'Goods Received',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_transaction_home_form'),
    'access callback' => 'user_is_logged_in',
  );
  $items['av/gr/new'] = array(
    'title' => 'Receive items',
    'page callback' => 'avtrans_gr_form_load',
    'page arguments' => array(NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/gr/gr.form.inc',
    'weight' => 10,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  $items['av/gr/%avtrans_gr/view'] = array(
    'title' => 'View Received Items',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_gr_form', 2, TRUE),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/gr/gr.form.inc',
    'weight' => 0,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  $items['av/sales-order'] = array(
    'title' => 'Sales Orders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_transaction_home_form'),
    'access callback' => 'user_is_logged_in',
  );
  $items['av/sales-order/new'] = array(
    'title' => 'New Sales Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_so_form', NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/so.form.inc',
    'weight' => 10,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  $items['av/sales-order/%avtrans_so/view'] = array(
    'title' => 'View Sales Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_so_form', 2, TRUE),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/so.form.inc',
    'weight' => 0,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  $items['av/delivery'] = array(
    'title' => 'Deliveries',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_transaction_home_form'),
    'access callback' => 'user_is_logged_in',
  );
  $items['av/delivery/new'] = array(
    'title' => 'New Delivery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_delivery_form', NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/delivery/delivery.form.inc',
    'weight' => 10,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  $items['av/delivery/%avtrans_dr/view'] = array(
    'title' => 'View Delivery',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avtrans_delivery_form', 2, TRUE),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/delivery/delivery.form.inc',
    'weight' => 0,
    //'tab_parent' => 'av/transactions',
    //'tab_root' => 'av/transactions',
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avtrans_theme($existing, $type, $theme, $path) {
  $themes = array();

  $template_path = $path . '/templates';

  // FORMS.
  $theme_names = array(
    'avtrans_item_list_form',
    'avtrans_transaction_list_filter_form',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  // OTHERS.
  $theme_names = array(
    'avtrans_po_mail',
    'avtrans_po_mail_table',
  );
  foreach ($theme_names as $theme_name) {
    $themes[$theme_name] = array(
      'variables' => array(),
      'template' => str_replace('_', '-', $theme_name),
      'path' => $template_path,
    );
  }

  return $themes;
}

/**
 * Transaction List page.
 * @param $form
 * @param $form_state
 * @return array
 */
function avtrans_transaction_home_form($form, &$form_state) {
// Set autocomplete off.
  $form['#attributes']['autocomplete'] = 'off';

  $form['new_po'] = array('#markup' => l('New purchase order', 'av/po/new', array('attributes' => array('class' => array('uk-button', 'uk-button-primary')))));
  $form['new_gr'] = array('#markup' => l('Receive items', 'av/gr/new', array('attributes' => array('class' => array('uk-button', 'uk-button-primary', 'uk-margin-left')))));
  $form['new_so'] = array('#markup' => l('New sales order', 'av/sales-order/new', array('attributes' => array('class' => array('uk-button', 'uk-button-primary', 'uk-margin-left')))));
  $form['new_dr'] = array('#markup' => l('New delivery', 'av/delivery/new', array('attributes' => array('class' => array('uk-button', 'uk-button-primary', 'uk-margin-left')))));

  $form['transaction_list'] = avtrans_transaction_list_form($form, $form_state);
  return $form;
}

/**
 * Implementation of hook_mail().
 * @param $key
 * @param $message
 * @param $params
 */
function avtrans_mail($key, &$message, $params) {
  switch ($key) {
    case 'po':
      $message['subject'] = t('Purchase Order from @site_name - P.O.# @po_num', array('@po_num' => $params['po_num'], '@site_name' => variable_get('site_name', 'UCT')));
      $message['body'] = theme('avtrans_po_mail', $params);
      // Save a copy.
      //$message['headers']['CC'] = 'ucaretrading@gmail.com';
      break;
  }
}

function avtrans_transaction_list_form($form, &$form_state) {
  $form = array(
    '#visible_in_view_mode' => TRUE,
    //'#prefix' => '<div>'
  );
  // Attachments.
  $form['#attached']['js'][] = AVTRANS_MODULE_PATH . '/js/transaction_list.form.js';

  $form['transaction_list_filter'] = avtrans_transaction_list_filter_form($form, $form_state);
  $form['transaction_list_filter']['#type'] = 'container';
  $form['transaction_list_filter']['#attributes']['id'] = 'avtrans-transaction-list-form';
  $client_header = 'Customer / Vendor';
  //if (arg(1) == 'vendors') {
  //  $client_header = 'Vendor';
  //}
  //elseif (arg(1) == 'customers') {
  //  $client_header = 'Customer';
  //}
  $header = array(
    array('data' => 'Type'),
    array('data' => 'Transaction #'),
    array('data' => 'Date'),
    array('data' => 'Agent'),
  );
  if (arg(1) == 'transactions') {
    $header[] = array('data' => $client_header);
  }

  //$trigger = empty($form_state['triggering_element']) ? array() : $form_state['triggering_element'];
  //if (!empty($trigger)) {
  //  $parents = $trigger['#parents'];
  //  dpm($parents);
  //  array_pop($parents);
  //  $parents[] = 'filter_query';
  //  $filter_query = drupal_array_get_nested_value($form_state['values'], $parents);
  //}

  $filter_query = empty($form_state['values']['transaction_list_filter']['filter_query']) ? array() : $form_state['values']['transaction_list_filter']['filter_query'];
  $where = empty($filter_query['where']) ? array() : $filter_query['where'];
  $args = empty($filter_query['args']) ? array() : $filter_query['args'];
  $transactions = avtrans_transactions_query_load($where,$args, '15');
  $index = 0;
  foreach ($transactions as $row) {
    $index++;
    $transaction_type = avtrans_transaction_types($row->transaction_type);
    $view_path = "{$transaction_type['base_path']}/$row->transaction_id/view";
    $rows[$index] = array(
      'data' => array(
        l($transaction_type['title'], $view_path),
        l($row->transaction_id, $view_path),
        l(format_date($row->transaction_date, 'custom', 'M d, Y h:i a'), $view_path),
        check_plain($row->agent_name),
      ),
      'class' => array('uk-table-middle'),
    );
    if (arg(1) == 'transactions') {
      $rows[$index]['data'][] = check_plain($row->display_name);
    }
  }

  $table_attributes = array(
    'id' => 'transaction-list-table',
    'class' => array(),
  );
  if (empty($rows)) {
    $table_markup = '<div class="uk-margin-top uk-text-muted">No match found.</div>';
  }
  else {
    $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes));
  }
  $form['table']['#markup'] = '<div id="transaction-list-table-wrapper">' . $table_markup . '<!--Do not remove me--></div>';
  return $form;
}

function avtrans_transaction_list_filter_form($form, &$form_state) {
  $fields = array('#tree' => TRUE, '#theme' => 'avtrans_transaction_list_filter_form');
  $fields['avtrans.id'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('ajax-search-filter'),
      'placeholder' => 'transaction #',
    ),
    '#icon_key' => 'search',
  );
  $fields['search_text'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('ajax-search-filter'),
      'placeholder' => 'search agent, customer, vendor',
    ),
    '#icon_key' => 'search',
  );

  $fields['search_button'] = array(
    '#id' => 'search-btn',
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('avtrans_transaction_list_filter_form_submit'),
    '#limit_validation_errors' => array(array('transaction_list_filter')),
    '#attributes' => array(
      'class' => array('uk-hidden')
    ),
    '#ajax' => array(
      'callback' => 'avtrans_transaction_form_ajax_search',
      'wrapper' => 'transaction-list-table-wrapper',
      'effect' => 'none',
      'event' => 'click',
      'progress' => array(),
    ),
  );

  //$filters = empty($form_state['values']['filter']) ? array() : $form_state['values']['filter'];
  //$fields['#where'] = array();
  //$fields['#args'] = array();
  //$arg_index = 0;
  //foreach ($filters as $k => $v) {
  //  if (in_array($k, array('search_button'))) {
  //    continue;
  //  }
  //  $arg_name = 'arg_' . $arg_index++;
  //  if ($k == 'search_text') {
  //    $or = array();
  //    $or[] = "avcat_agent.title LIKE :$arg_name";
  //    $or[] = "avclient.display_name LIKE :$arg_name";
  //    $fields['#where'][] = '(' . implode(' OR ', $or) . ')';
  //    $fields['#args'][":$arg_name"] = '%' . db_like($v) . '%';
  //    continue;
  //  }
  //
  //  if ($v != '') {
  //    $fields['#where'][] = "{$k} = :$arg_name";
  //    $fields['#args'][":$arg_name"] = $v;
  //  }
  //}
  return $fields;
}

function avtrans_transaction_list_filter_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $trigger = $form_state['triggering_element'];
  $parents = $trigger['#parents'];
  array_pop($parents);
  $filter_values = drupal_array_get_nested_value($form_state['values'], $parents);

  $arg_index = 0;
  $where = $args = array();
  foreach ($filter_values as $k => $v) {
    if (in_array($k, array('search_button'))) {
      continue;
    }
    $arg_name = 'arg_' . $arg_index++;
    if ($k == 'search_text') {
      $or = array();
      $or[] = "avcat_agent.title LIKE :$arg_name";
      $or[] = "avclient.display_name LIKE :$arg_name";
      $where[] = '(' . implode(' OR ', $or) . ')';
      $args[":$arg_name"] = '%' . db_like($v) . '%';
      continue;
    }

    if ($v != '') {
      $where[] = "{$k} = :$arg_name";
      $args[":$arg_name"] = $v;
    }
  }

  $parents[] = 'filter_query';
  drupal_array_set_nested_value($form_state['values'], $parents, array('where' => $where, 'args' => $args));
}


function avtrans_transaction_form_ajax_search($form, $form_state) {
  $trigger = $form_state['triggering_element'];
  $transaction_list_form = drupal_array_get_nested_value($form, array($trigger['#array_parents'][0]));
  switch ($trigger['#id']) {
    case 'search-btn':
      return $transaction_list_form['table'];
      break;
  }
}