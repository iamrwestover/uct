<?php
/**
 * @file
 * Import feature.
 */
define('AVIMPORT_MODULE_PATH', drupal_get_path('module', 'avimport'));
module_load_include('inc', 'avimport', 'inc/helpers');

/**
 * Implementation of hook_menu().
 */
function avimport_menu() {
  $items['av/import'] = array(
    'title' => 'Import NEW Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avimport_import_form'),
    'access arguments' => array(AVBASE_PERM_IMPORT),
    'menu_name' => 'av',
    'expanded' => TRUE,
  );
  $items['av/import/prepare-data'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('avimport_prepare_form'),
    'access arguments' => array(AVBASE_PERM_IMPORT),
    //'menu_name' => 'av',
    //'expanded' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function avimport_permission() {
  $permissions = array(
    AVBASE_PERM_IMPORT => array(
      'title' => 'Import data',
    ),
  );
  return $permissions;
}

/**
 * Build form for Import Page.
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function avimport_import_form($form, &$form_state) {
  $form['#attached']['js'][] = AVIMPORT_MODULE_PATH . '/js/avimport.js';

  // "Analyze data" Fieldset.
  $form['analyze_data'] = array(
    '#type' => 'fieldset',
    //'#title' => 'Upload',
    '#access' => empty($excel_rows),
  );
  $form['analyze_data']['notice'] = array(
    '#markup' => '
    <div class="uk-margin-bottom">
      <span class="uk-text-large">Before proceeding, kindly double check to make sure that your excel file:</span>
      <br />- contains the correct header names (all CAPS).
      <br />- contains all the required headers.
      <br />- does not have any formula in any cell.
      <br />- does not have any hidden row or column.
      <br />- does not have <strong>%</strong> sign on numeric values like Discounts.
      <br />
      <br />
      <span class="uk-text-large"><em>Import Vendors first, Customers, then Products last.</em></span>
    </div>',
  );
  $form['analyze_data']['import_type'] = array(
    '#type' => 'radios',
    '#title' => t('Type of data to import'),
    //'#description' => t('Type of data to import'),
    //'#title_display' => 'none',
    '#options' => array(
      'vendors' => t('NEW vendors'),
      'customers' => t('NEW customers'),
      'products' => t('NEW products'),
    ),
    '#default_value' => 'vendors',
    '#attributes' => array(
      'class' => array('uk-button-group'),
    ),
  );
  $form['analyze_data']['product_valid_headers'] = avimport_form_valid_header_field($form['analyze_data']['import_type']['#options']);
  $form['analyze_data']['file'] = array(
    '#type' => 'file',
    '#description' => t('Choose a valid excel file, allowed extensions: .xls, .xlsx'),
  );
  $form['analyze_data']['submit'] = array(
    '#id' => 'analyze-btn',
    '#type' => 'submit',
    '#value' => t('Upload and import data'),
    '#attributes' => array('class' => array('uk-button-primary uk-margin-top')),
  );

  // "Prepare Data" Fieldset.
  $form['pending_data'] = array(
    '#type' => 'fieldset',
    //'#title' => 'Prepare data',
    '#attributes' => array('class' => array('')),
    '#access' => !empty($excel_rows),
  );

  return $form;
}

/**
 * Validate handler for avimport_import_form().
 *
 * @ingroup form_example
 */
function avimport_import_form_validate($form, &$form_state) {
  $trigger = $form_state['triggering_element'];
  if ($trigger['#id'] != 'analyze-btn') {
    return;
  }

  $file = file_save_upload('file', array(
    // Validates file is really an image.
    'avbase_file_validate_is_excel' => array(),
    // Validate extensions.
    'file_validate_extensions' => array('xls xlsx csv'),
  ));
  // If the file passed validation:
  if ($file) {
    // Save the file for use in the submit handler.
    $form_state['storage']['file'] = $file;
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }

}

/**
 * Submit handler for avimport_import_form().
 *
 * @ingroup form_example
 */
function avimport_import_form_submit($form, &$form_state) {
  $trigger = $form_state['triggering_element'];
  switch ($trigger['#id']) {
    case 'analyze-btn':
      $import_type = empty($form_state['values']['import_type']) ? '' : $form_state['values']['import_type'];

      $file = $form_state['storage']['file'];
      // We are done with the file, remove it from storage.
      unset($form_state['storage']['file']);

      // Prepare the file path. The PHPExcel library doesn't handle PHP stream
      // wrappers, so we need the real path.
      $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
      $filepath = $wrapper->realpath();

      // Start import.
      $batch = array(
        'operations' => array(
          array('avimport_batch_read_data', array($filepath, $import_type)),
        ),
        'finished' => 'avimport_batch_read_finished',
        'title' => t('Importing @type', array('@type' => $import_type)),
        //'init_message' => t('Example Batch is starting.'),
        //'progress_message' => '',
        'error_message' => t('Data analysis encountered an error'),
        'file' => drupal_get_path('module', 'phpexcel') . '/phpexcel.inc',
      );
      batch_set($batch);
      break;

    case 'reset-btn':
      unset($_SESSION['avimport']);
      break;
  }
}

/**
 * Batch process to analyze excel data.
 * @param $filepath
 * @param $import_type
 * @param $context
 *
 * @throws Exception
 */
function avimport_batch_read_data($filepath, $import_type, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    // We have no idea how many lines we have to load. Provide an estimate
    // max, and we'll adapt as we go along.
    $context['sandbox']['max'] = 1000;
    $context['results'] = array();
    $context['sandbox']['progress'] = 0;
  }

  // Pointers.
  $_results = &$context['results'];
  $_progress = &$context['sandbox']['progress'];

  // Get valid headers.
  $valid_headers = avimport_get_valid_headers($import_type);
  $required_headers = empty($valid_headers['required']) ? array() : $valid_headers['required'];
  $optional_headers = empty($valid_headers['optional']) ? array() : $valid_headers['optional'];
  if (empty($required_headers)) {
    $_results['errors'][] = t('Required headers not set for %type.', array('%type' => $import_type));
    return;
  }

  // Set maximum number of rows to analyze per iteration.
  $limit = 100;

  // We need to load the library before we can instantiate our ChunkReaderFilter class.
  $library = libraries_load('PHPExcel');
  if (empty($library['loaded'])) {
    $_results['errors'][] = t("Couldn't load the PHPExcel library.");
    return;
  }
  $chunk_filter = new ChunkReadFilter();
  // Excel row0 = header, and row1 = first row. PHPExcel treats row numbering starts at 1 and not 0, so we use +2.
  // We add +1 to limit as padding, so that we can get the very first row right after the limit, which we will
  // use to check if we already reached end of file.
  $chunk_filter->setRows($_progress + 2, $limit + 1);
  $data = phpexcel_import($filepath, TRUE, FALSE, array(
    'setReadFilter' => array($chunk_filter),
  ));
  if (!is_array($data)) {
    $_results['errors'][] = t("Something went wrong on pass !pass", array(
      '!pass' => $_progress,
    ));
    if ($data == PHPEXCEL_ERROR_FILE_NOT_READABLE) {
      $_results['errors'][] = t('The file %filepath is unreadable.', array('%filepath' => $filepath));
    }
    return;
  }
  $_results['filepath'] = $filepath;

  // Trim $data array appropriately because ChunkReaderFilter still loads empty
  // data from first excel row until specified row start.
  $data = array_splice($data[0], $_progress);

  // Check if required headers are present.
  $missing_headers = array_diff_key($required_headers, $data[0]);
  if (!empty($missing_headers)) {
    $_results['errors'][] = t('The following required headers are not found: !required_headers', array('!required_headers' => theme('item_list', array('items' => array_keys($missing_headers)))));
    return;
  }

//dpm($data);
  foreach ($data as $k => $excel_row) {
    if ($k == $limit) {
      // Limit reached. This last $excel_row is the very first row on the next iteration.
      break;
    }

    if (!empty($excel_row)) {
      // Validate and update $excel_row.
      avimport_db_insert($_results, $excel_row, $import_type);

      //node_save($node);
      $_results['rows'][] = $excel_row;
    }
    else {
      // Empty row detected. Consider it as end of file.
      $_results['success'] = TRUE;
      return;
    }
  }

  // If last row is empty. Consider it as end of file.
  if (empty($data[$limit])) {
    $_results['success'] = TRUE;
    return;
  }

  // Update progress counter.
  $_progress += $limit;

  // Compute for progress percentage.
  $finished = $_progress / $context['sandbox']['max'];
  if ($finished >= 1 && empty($_results['success'])) {
    // We haven't reached the end of file, we only reached estimate maximum number of rows.
    // Increase max and recompute for progress percentage.
    $context['sandbox']['max'] += 500;
    $finished = $_progress / $context['sandbox']['max'];
  }

  // Set progress message. $results['inserted'] , '%inserted' => count($_results['inserted'])
  $context['message'] = t('Estimated %row_max rows at most. %row rows read. %inserted %type imported.', array('%row' => $_progress, '%row_max' => $context['sandbox']['max'], '%inserted' => count($_results['inserted']), '%type' => $import_type));
  // Set progress percentage.
  $context['finished'] = $finished;
}

/**
 * Callback when avimport_batch_process() is finished.
 * @param $success
 * @param $results
 * @param $operations
 *
 * @throws Exception
 */
function avimport_batch_read_finished($success, $results, $operations) {
  if ($success && !empty($results['success'])) {

  }
  else {
    drupal_set_message(t('Data import was interrupted.'), 'error');

    // An error occurred.
    if (empty($success)) {
      // $operations contains the operations that remained unprocessed.
      $error_operation = reset($operations);
      $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
      drupal_set_message($message, 'error');
    }

    $errors = empty($results['errors']) ? array() : $results['errors'];
    foreach ($errors as $err) {
      drupal_set_message($err, 'error');
    }
  }

  $found = empty($results['rows']) ? array() : $results['rows'];
  drupal_set_message(t('%count rows found from %filepath.', array('%count' => count($found), '%filepath' => $results['filepath'])), 'notice');
  $inserted = empty($results['inserted']) ? array() : $results['inserted'];
  drupal_set_message(t('%count rows inserted into the database.', array('%count' => count($inserted))), 'notice');

  $insert_errors = empty($results['insert_errors']) ? array() : $results['insert_errors'];
  if (!empty($insert_errors)) {
    foreach ($insert_errors as $err) {
      drupal_set_message($err, 'error');
    }
  }
}




//
///**
// * Batch process to import excel date and create nodes for each row.
// * @param $filepath
// * @param $context
// *
// * @throws Exception
// */
//function avimport_batch_process($options1, &$context) {
//  if (!isset($context['sandbox']['progress'])) {
//    $context['sandbox']['progress'] = 0;
//    //$context['sandbox']['current_node'] = 0;
//    $context['sandbox']['max'] = 50;
//  }
//
//  // For this example, we decide that we can safely process
//  // 5 nodes at a time without a timeout.
//  $limit = 5;
//
//  // With each pass through the callback, retrieve the next group of nids.
//  //$result = db_query_range("SELECT nid FROM {node} WHERE nid > %d ORDER BY nid ASC", $context['sandbox']['current_node'], 0, $limit);
//  //while ($row = db_fetch_array($result)) {
//  //while (1) {
//
//  for ($x = 0; $x < 1; $x++) {
//    $result = db_query_range("SELECT nid FROM {node} WHERE nid > :d ORDER BY nid ASC", 0, $limit, array(':d' => 0));
//    foreach ($result as $row) {
//
//      // Here we actually perform our processing on the current node.
//      $node = node_load($row->nid, NULL, TRUE);
//      $node->title = '-' . $context['sandbox']['progress'];
//      //$node->body = $options2;
//      node_save($node);
//
//      // Store some result for post-processing in the finished callback.
//      $context['results'][$context['sandbox']['progress']] = check_plain($node->title);
//
//
//      // Update our progress information.
//      $context['sandbox']['progress']++;
//      $context['message'] = t('Now processing %node', array('%node' => $context['sandbox']['progress']));
//    }
//  }
//
//
//  // Update our progress information.
//  //$context['sandbox']['progress']++;
//  //$context['message'] = t('Now processing %node', array('%node' => $context['sandbox']['progress']));
//  //}
//
//  //if ($context['sandbox']['progress'] > 30) {
//  //  $context['finished'] = 1;
//  //  $context['success'] = FALSE;
//  //}
//
//  // Inform the batch engine that we are not finished,
//  // and provide an estimation of the completion level we reached.
//
//  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
//    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
//  }
//}
//
///**
// * Callback when avimport_batch_process() is finished.
// * @param $success
// * @param $results
// * @param $operations
// *
// * @throws Exception
// */
//function avimport_batch_finished($success, $results, $operations) {
//  dpm($results);
//  if ($success) {
//    // Here we do something meaningful with the results.
//    $message = t('@count items successfully processed:', array('@count' => count($results)));
//    // $message .= theme('item_list', $results);  // D6 syntax
//    //$message .= theme('item_list', array('items' => $results));
//    drupal_set_message($message);
//  }
//  else {
//    // An error occurred.
//    // $operations contains the operations that remained unprocessed.
//    $error_operation = reset($operations);
//    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
//    drupal_set_message($message, 'error');
//  }
//}

function avimport_form_valid_header_field($types) {
  $field =  array('#type' => 'item', '#markup' => '');
  foreach ($types as $type_k => $type) {
    $valid_headers = avimport_get_valid_headers($type_k);
    $markup = '<div id="' . $type_k . '-valid-headers" class="import-valid-headers uk-hidden">';
    $markup .= t('Required headers: !headers', array('!headers' => implode(', ', array_keys($valid_headers['required']))));
    $markup .= '<br />' . t('Optional headers: !headers', array('!headers' => implode(', ', array_keys($valid_headers['optional']))));
    $markup .= '</div>';
    $field['#markup'] .= $markup;
  }
  return $field;
}
