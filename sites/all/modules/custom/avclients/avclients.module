<?php

/**
 * @file
 * AV Clients module.
 */

define('AVCLIENTS_MODULE_PATH', drupal_get_path('module', 'avclients'));
module_load_include('inc', 'avclients', 'inc/helpers');


define('AVCLIENT_TYPE_CUSTOMER', 1);
define('AVCLIENT_TYPE_VENDOR', 2);

define('AVCLIENT_STATUS_DISABLED', 0);
define('AVCLIENT_STATUS_ACTIVE', 1);
define('AVCLIENT_STATUS_SUSPENDED', 2);

// Permissions.
// Permissions.
$ctds = avclients_client_types();
foreach ($ctds as $ctd) {
  define('AVCLIENTS_PERM_CREATE_' . $ctd['type'], 'avbase create client_' . $ctd['type']);
  define('AVCLIENTS_PERM_EDIT_' . $ctd['type'], 'avbase edit client_' . $ctd['type']);
  define('AVCLIENTS_PERM_VIEW_' . $ctd['type'], 'avbase view client_' . $ctd['type']);
  define('AVCLIENTS_PERM_CHANGE_STATUS_' . $ctd['type'], 'avbase change status client_' . $ctd['type']);
}

/**
 * Implementation of hook_menu().
 */
function avclients_menu() {
  $items = array();
  $client_types = avclients_client_types();
  foreach ($client_types as $k => $v) {
    $v_type = $v['type'];
    $items["{$v['base_path']}"] = array(
      'title' => $v['plural_name'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avbase_entity_overview_form', "$k"),
      'access arguments' => array(constant("AVCLIENTS_PERM_VIEW_{$v_type}")),
      'menu_name' => 'av',
      'expanded' => TRUE,
    );

    $items["{$v['base_path']}/add"] = array(
      'title' => "New {$v['name']}",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avclients_client_form', "$k", NULL),
      'access arguments' => array(constant("AVCLIENTS_PERM_CREATE_{$v_type}")),
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/crud.inc',
      'weight' => 10,
    );
    $items["{$v['base_path']}/%avclient/view"] = array(
      'title' => 'View',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avclients_client_form', "$k", 2, TRUE),
      'access arguments' => array(constant("AVCLIENTS_PERM_VIEW_{$v_type}")),
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/crud.inc',
      'weight' => 0,
    );
    $items["{$v['base_path']}/%avclient/edit"] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avclients_client_form', "$k", 2),
      'access arguments' => array(constant("AVCLIENTS_PERM_EDIT_{$v_type}")),
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/crud.inc',
      'weight' => 1,
    );
    //$items["{$v['base_path']}/%avclient/delete"] = array(
    //  'title' => 'Delete',
    //  'page callback' => 'drupal_get_form',
    //  'page arguments' => array('avclients_client_delete_confirm_form', 2),
    //  'access callback' => 'user_is_logged_in',
    //  'type' => MENU_CALLBACK,
    //  'file' => 'inc/crud.inc',
    //  'weight' => 2,
    //);
    $items["{$v['base_path']}/%avclient/%/change-status"] = array(
      'title' => 'Status change',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('avclients_client_change_status_confirm_form', 2, 3),
      'access arguments' => array(constant("AVCLIENTS_PERM_CHANGE_STATUS_{$v_type}")),
      'type' => MENU_CALLBACK,
      'file' => 'inc/crud.inc',
    );
  }

  $items["av/clients/autocomplete"] = array(
    'title' => 'Clients Autocomplete',
    'page callback' => 'avclients_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'inc/helpers.inc',
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function avclients_permission() {
  $permissions = array();
  $ctds = avclients_client_types();
  foreach ($ctds as $ctd_k => $ctd) {
    $ctd_name = $ctd['name'];
    $permissions[constant('AVCLIENTS_PERM_CREATE_' . $ctd['type'])] = array(
      'title' => t('@ctdname - CREATE', array('@ctdname' => $ctd_name)),
    );
    $permissions[constant('AVCLIENTS_PERM_EDIT_' . $ctd['type'])] = array(
      'title' => t('@ctdname - EDIT', array('@ctdname' => $ctd_name)),
    );
    $permissions[constant('AVCLIENTS_PERM_VIEW_' . $ctd['type'])] = array(
      'title' => t('@ctdname - VIEW', array('@ctdname' => $ctd_name)),
    );
    $permissions[constant('AVCLIENTS_PERM_CHANGE_STATUS_' . $ctd['type'])] = array(
      'title' => t('@ctdname - CHANGE STATUS', array('@ctdname' => $ctd_name)),
    );
  }
  return $permissions;
}

/**
 * Implementation of hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function avclients_theme($existing, $type, $theme, $path) {
  $forms_template_path = $path . '/templates';
  $form_names = array(
    'avclients_client_form',
    'avclients_home_form',
  );

  $theme_forms = array();
  foreach ($form_names as $form_name) {
    $theme_forms[$form_name] = array(
      'render element' => 'form',
      'template' => str_replace('_', '-', $form_name),
      'path' => $forms_template_path,
    );
  }

  return $theme_forms;
}

/**
 * Clients homepage form.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function avclients_home_form($form, &$form_state) {
//  drupal_add_js('sites/all/libraries/ag-grid/ag-grid.min.js');
//  drupal_add_js(AVCLIENTS_MODULE_PATH . '/js/avclients.js');

  $btn_options = array('attributes' => array('class' => AV_STYLE_CLASS_BTN . ' ' . AV_STYLE_CLASS_BTN_PRIMARY));
  $form['new_button'] = array('#markup' => l('New client', 'av/clients/add', $btn_options));

  $header = array(
    array('data' => 'ID', 'field' => 'id', 'sort' => 'desc', 'class' => array('uk-hidden')),
    array('data' => 'Client / Company', 'field' => 'display_name'),
    array('data' => 'Address', 'field' => 'address'),
    array('data' => 'City', 'field' => 'city'),
    array('data' => 'Province', 'field' => 'province'),
    array('data' => 'Contact', 'field' => ''),
    '&nbsp;',
  );

  $rows = array();
  $result = db_select('avtbl_clients', 'ac')
    ->fields('ac')
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->limit(10)
    ->orderByHeader($header)
    ->execute();

  $action_links_all = array();
  foreach ($result as $row) {
    $row_data = unserialize($row->data);
    $menu_prefix = 'av/clients/' . $row->id;

    // Set row status class.
    switch ($row->status) {
      case AVCLIENT_STATUS_SUSPENDED:
        $row_status_class = ' uk-alert-danger';
        break;
      default:
        $row_status_class = '';
        break;
    }

    $action_links = array('links' => array(
      'edit' => array('title' => 'edit', 'href' => $menu_prefix . '/edit', 'icon_kedy' => 'edit', 'query' => drupal_get_destination()),
      //'delete' => array('title' => 'delete', 'href' => $menu_prefix . '/delete', 'icond_key' => 'remove', 'query' => drupal_get_destination()),
    ));
    $action_links_all[] = $action_links;
    $actions_html = theme('links__bare', $action_links);
    $linked_name = l($row->display_name, $menu_prefix . '/view');
    $contact_numbers = array();
    $contact_numbers[] = isset($row_data['phone1']) ? $row_data['phone1'] : '';
    $contact_numbers[] = isset($row_data['phone2']) ? $row_data['phone2'] : '';
    $contact_numbers[] = isset($row_data['phone3']) ? $row_data['phone3'] : '';
    $contact_numbers = array_filter($contact_numbers);
    $rows[] = array(
      'data' => array(
        'id' => array('data' => $row->id, 'class' => array('uk-hidden')),
        'display_name' => $linked_name . '<span class="uk-text-muted"> / ' . check_plain($row->company) .  '</span>',
        'address' => truncate_utf8(check_plain($row->address), 30, FALSE, TRUE),
        'city' => truncate_utf8(check_plain($row->city), 30, FALSE, TRUE),
        'province' => truncate_utf8(check_plain($row->province), 30, FALSE, TRUE),
        'contact' => array_shift($contact_numbers),
        'actions' => $actions_html,
      ),
      'class' => array('uk-table-middle' . $row_status_class),
    );
  }

  $table_attributes = array('id' => 'clients-list-table', 'class' => array('usk-table-condensed'));
  if (empty($rows)) {
    $table_markup = '<p>Nothing recorded yet.</p>';
  }
  else {
    $table_markup = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $table_attributes, 'action_links_all' => $action_links_all));
  }
  $form['table']['#markup'] = $table_markup;
  $form['pager']['#markup'] = theme('pager', array('tags' => array()));
//$form['#after_build'] = array('avclients_home_form_after_build');
//  $form['ag-grid']['#markup'] = '<div id="myGrid" style="height: 300px;" class="ag-fresh"></div>';
  return $form;
}

function avclients_home_form_after_build($form, &$form_state) {
  dpm('f');
  dpm($form);
  return $form;
}

/**
 * Return list of client types.
 * @param int $client_type
 *
 * @return array
 */
function avclients_client_types($client_type = NULL) {
  $ret = &drupal_static(__FUNCTION__, array());
  if (empty($ret)) {
    $ret[AVCLIENT_TYPE_CUSTOMER] = array(
      'type' => AVCLIENT_TYPE_CUSTOMER,
      'base_path' => 'av/customers',
      'name' => 'Customer',
      'plural_name' => 'Customers',
    );
    $ret[AVCLIENT_TYPE_VENDOR] = array(
      'type' => AVCLIENT_TYPE_VENDOR,
      'base_path' => 'av/vendors',
      'name' => 'Vendor',
      'plural_name' => 'Vendors',
    );
  }

  if (isset($ret[$client_type])) {
    return $ret[$client_type];
  }
  elseif (is_null($client_type)) {
    return $ret;
  }
  return NULL;
}
